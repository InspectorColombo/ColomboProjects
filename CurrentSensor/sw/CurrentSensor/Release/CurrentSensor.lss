
CurrentSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_info   00000420  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003e8  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000f2  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000169  00000000  00000000  00000aa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	2f d0       	rcall	.+94     	; 0x8a <main>
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <LedLatchDelay>:
  30:	96 e0       	ldi	r25, 0x06	; 6
  32:	84 e6       	ldi	r24, 0x64	; 100
	...
  40:	81 50       	subi	r24, 0x01	; 1
  42:	c1 f7       	brne	.-16     	; 0x34 <LedLatchDelay+0x4>
  44:	91 50       	subi	r25, 0x01	; 1
  46:	a9 f7       	brne	.-22     	; 0x32 <LedLatchDelay+0x2>
  48:	08 95       	ret

0000004a <SendLedByte>:
  4a:	cf 93       	push	r28
  4c:	c8 2f       	mov	r28, r24
  4e:	c1 98       	cbi	0x18, 1	; 24
  50:	ef df       	rcall	.-34     	; 0x30 <LedLatchDelay>
  52:	8c 2f       	mov	r24, r28
  54:	98 e0       	ldi	r25, 0x08	; 8
  56:	87 ff       	sbrs	r24, 7
  58:	02 c0       	rjmp	.+4      	; 0x5e <SendLedByte+0x14>
  5a:	c0 9a       	sbi	0x18, 0	; 24
  5c:	01 c0       	rjmp	.+2      	; 0x60 <SendLedByte+0x16>
  5e:	c0 98       	cbi	0x18, 0	; 24
  60:	00 00       	nop
  62:	00 00       	nop
  64:	c1 9a       	sbi	0x18, 1	; 24
  66:	91 50       	subi	r25, 0x01	; 1
  68:	29 f0       	breq	.+10     	; 0x74 <SendLedByte+0x2a>
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	c1 98       	cbi	0x18, 1	; 24
  70:	88 0f       	add	r24, r24
  72:	f1 cf       	rjmp	.-30     	; 0x56 <SendLedByte+0xc>
  74:	dd df       	rcall	.-70     	; 0x30 <LedLatchDelay>
  76:	c1 98       	cbi	0x18, 1	; 24
  78:	cf 91       	pop	r28
  7a:	08 95       	ret

0000007c <InitLeds>:
  7c:	c1 98       	cbi	0x18, 1	; 24
  7e:	c0 98       	cbi	0x18, 0	; 24
  80:	87 b3       	in	r24, 0x17	; 23
  82:	83 60       	ori	r24, 0x03	; 3
  84:	87 bb       	out	0x17, r24	; 23
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	e0 cf       	rjmp	.-64     	; 0x4a <SendLedByte>

0000008a <main>:
  8a:	f8 df       	rcall	.-16     	; 0x7c <InitLeds>
  8c:	c1 e0       	ldi	r28, 0x01	; 1
  8e:	8c 2f       	mov	r24, r28
  90:	dc df       	rcall	.-72     	; 0x4a <SendLedByte>
  92:	8a ef       	ldi	r24, 0xFA	; 250
  94:	16 d0       	rcall	.+44     	; 0xc2 <DelayDebugMiliSeconds>
  96:	8a ef       	ldi	r24, 0xFA	; 250
  98:	14 d0       	rcall	.+40     	; 0xc2 <DelayDebugMiliSeconds>
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	12 d0       	rcall	.+36     	; 0xc2 <DelayDebugMiliSeconds>
  9e:	8a ef       	ldi	r24, 0xFA	; 250
  a0:	10 d0       	rcall	.+32     	; 0xc2 <DelayDebugMiliSeconds>
  a2:	cc 0f       	add	r28, r28
  a4:	a1 f7       	brne	.-24     	; 0x8e <main+0x4>
  a6:	f2 cf       	rjmp	.-28     	; 0x8c <main+0x2>

000000a8 <DelayDebugMicroseconds>:
  a8:	88 23       	and	r24, r24
  aa:	51 f0       	breq	.+20     	; 0xc0 <DelayDebugMicroseconds+0x18>
	...
  bc:	81 50       	subi	r24, 0x01	; 1
  be:	f4 cf       	rjmp	.-24     	; 0xa8 <DelayDebugMicroseconds>
  c0:	08 95       	ret

000000c2 <DelayDebugMiliSeconds>:
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
  c6:	cc 23       	and	r28, r28
  c8:	61 f0       	breq	.+24     	; 0xe2 <DelayDebugMiliSeconds+0x20>
  ca:	88 ec       	ldi	r24, 0xC8	; 200
  cc:	ed df       	rcall	.-38     	; 0xa8 <DelayDebugMicroseconds>
  ce:	88 ec       	ldi	r24, 0xC8	; 200
  d0:	eb df       	rcall	.-42     	; 0xa8 <DelayDebugMicroseconds>
  d2:	88 ec       	ldi	r24, 0xC8	; 200
  d4:	e9 df       	rcall	.-46     	; 0xa8 <DelayDebugMicroseconds>
  d6:	88 ec       	ldi	r24, 0xC8	; 200
  d8:	e7 df       	rcall	.-50     	; 0xa8 <DelayDebugMicroseconds>
  da:	88 ec       	ldi	r24, 0xC8	; 200
  dc:	e5 df       	rcall	.-54     	; 0xa8 <DelayDebugMicroseconds>
  de:	c1 50       	subi	r28, 0x01	; 1
  e0:	f2 cf       	rjmp	.-28     	; 0xc6 <DelayDebugMiliSeconds+0x4>
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
