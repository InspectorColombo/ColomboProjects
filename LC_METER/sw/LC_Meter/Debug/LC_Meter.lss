
LC_Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a6  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000598  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000275  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	42 d0       	rcall	.+132    	; 0xbc <main>
  38:	44 c0       	rjmp	.+136    	; 0xc2 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <PushToLed>:
	DDRC |= (1 << 3);
}

inline void ClrLedSck()
{
	PORTC &= ~(1 << 3);
  3c:	95 b3       	in	r25, 0x15	; 21
  3e:	97 7f       	andi	r25, 0xF7	; 247
  40:	95 bb       	out	0x15, r25	; 21
	DDRC &= ~(1 << 3);
  42:	94 b3       	in	r25, 0x14	; 20
  44:	97 7f       	andi	r25, 0xF7	; 247
  46:	94 bb       	out	0x14, r25	; 20
	DDRC |= (1 << 2);
}

inline void ClrLedLatch()
{
	PORTC &= ~(1 << 2);
  48:	95 b3       	in	r25, 0x15	; 21
  4a:	9b 7f       	andi	r25, 0xFB	; 251
  4c:	95 bb       	out	0x15, r25	; 21
	DDRC &= ~(1 << 2);
  4e:	94 b3       	in	r25, 0x14	; 20
  50:	9b 7f       	andi	r25, 0xFB	; 251
  52:	94 bb       	out	0x14, r25	; 20
{
	ClrLedSck();
	ClrLedLatch();
	
	uint8_t tmpVal = value;
	for(uint8_t i = 0; i < 8; ++i)
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	23 c0       	rjmp	.+70     	; 0x9e <__SREG__+0x5f>
	DDRC |= (1 << 3);
}

inline void ClrLedSck()
{
	PORTC &= ~(1 << 3);
  58:	95 b3       	in	r25, 0x15	; 21
  5a:	97 7f       	andi	r25, 0xF7	; 247
  5c:	95 bb       	out	0x15, r25	; 21
	DDRC &= ~(1 << 3);
  5e:	94 b3       	in	r25, 0x14	; 20
  60:	97 7f       	andi	r25, 0xF7	; 247
  62:	94 bb       	out	0x14, r25	; 20
	
	uint8_t tmpVal = value;
	for(uint8_t i = 0; i < 8; ++i)
	{
		ClrLedSck();
		if ((tmpVal & 0x01) != 00)
  64:	80 ff       	sbrs	r24, 0
  66:	07 c0       	rjmp	.+14     	; 0x76 <__SREG__+0x37>
	DDRC &= ~(1 << 2);
}

inline void SetLedData()
{
	PORTC |= (1 << 1);
  68:	95 b3       	in	r25, 0x15	; 21
  6a:	92 60       	ori	r25, 0x02	; 2
  6c:	95 bb       	out	0x15, r25	; 21
	DDRC |= (1 << 1);
  6e:	94 b3       	in	r25, 0x14	; 20
  70:	92 60       	ori	r25, 0x02	; 2
  72:	94 bb       	out	0x14, r25	; 20
  74:	06 c0       	rjmp	.+12     	; 0x82 <__SREG__+0x43>
}

inline void ClrLedData()
{
	PORTC &= ~(1 << 1);
  76:	95 b3       	in	r25, 0x15	; 21
  78:	9d 7f       	andi	r25, 0xFD	; 253
  7a:	95 bb       	out	0x15, r25	; 21
	DDRC &= ~(1 << 1);
  7c:	94 b3       	in	r25, 0x14	; 20
  7e:	9d 7f       	andi	r25, 0xFD	; 253
  80:	94 bb       	out	0x14, r25	; 20
#include <avr/io.h>


inline void SetLedSck()
{
	PORTC |= (1 << 3);
  82:	95 b3       	in	r25, 0x15	; 21
  84:	98 60       	ori	r25, 0x08	; 8
  86:	95 bb       	out	0x15, r25	; 21
	DDRC |= (1 << 3);
  88:	94 b3       	in	r25, 0x14	; 20
  8a:	98 60       	ori	r25, 0x08	; 8
  8c:	94 bb       	out	0x14, r25	; 20
		{
			ClrLedData();
		}
		SetLedSck();
		
		tmpVal = tmpVal >> 1;
  8e:	86 95       	lsr	r24
	DDRC |= (1 << 3);
}

inline void ClrLedSck()
{
	PORTC &= ~(1 << 3);
  90:	95 b3       	in	r25, 0x15	; 21
  92:	97 7f       	andi	r25, 0xF7	; 247
  94:	95 bb       	out	0x15, r25	; 21
	DDRC &= ~(1 << 3);
  96:	94 b3       	in	r25, 0x14	; 20
  98:	97 7f       	andi	r25, 0xF7	; 247
  9a:	94 bb       	out	0x14, r25	; 20
{
	ClrLedSck();
	ClrLedLatch();
	
	uint8_t tmpVal = value;
	for(uint8_t i = 0; i < 8; ++i)
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	28 30       	cpi	r18, 0x08	; 8
  a0:	d8 f2       	brcs	.-74     	; 0x58 <__SREG__+0x19>
	DDRC &= ~(1 << 3);
}

inline void SetLedLatch()
{
	PORTC |= (1 << 2);
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	85 bb       	out	0x15, r24	; 21
	DDRC |= (1 << 2);
  a8:	84 b3       	in	r24, 0x14	; 20
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	84 bb       	out	0x14, r24	; 20
	DDRC &= ~(1 << 3);
}

inline void SetLedLatch()
{
	PORTC |= (1 << 2);
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	85 bb       	out	0x15, r24	; 21
	DDRC |= (1 << 2);
  b4:	84 b3       	in	r24, 0x14	; 20
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	84 bb       	out	0x14, r24	; 20
  ba:	08 95       	ret

000000bc <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		PushToLed(0x01);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	be df       	rcall	.-132    	; 0x3c <PushToLed>
  c0:	fd cf       	rjmp	.-6      	; 0xbc <main>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
