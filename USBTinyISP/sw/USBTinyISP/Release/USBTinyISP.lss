
USBTinyISP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000007a4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800062  00800062  0000083a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000086c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000008b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004d8  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ff  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fa  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000163  00000000  00000000  00001bc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	39 c0       	rjmp	.+114    	; 0x74 <__ctors_end>
   2:	77 c0       	rjmp	.+238    	; 0xf2 <__vector_1>
   4:	50 c0       	rjmp	.+160    	; 0xa6 <__bad_interrupt>
   6:	4f c0       	rjmp	.+158    	; 0xa6 <__bad_interrupt>
   8:	4e c0       	rjmp	.+156    	; 0xa6 <__bad_interrupt>
   a:	4d c0       	rjmp	.+154    	; 0xa6 <__bad_interrupt>
   c:	4c c0       	rjmp	.+152    	; 0xa6 <__bad_interrupt>
   e:	4b c0       	rjmp	.+150    	; 0xa6 <__bad_interrupt>
  10:	4a c0       	rjmp	.+148    	; 0xa6 <__bad_interrupt>
  12:	49 c0       	rjmp	.+146    	; 0xa6 <__bad_interrupt>
  14:	48 c0       	rjmp	.+144    	; 0xa6 <__bad_interrupt>
  16:	47 c0       	rjmp	.+142    	; 0xa6 <__bad_interrupt>
  18:	46 c0       	rjmp	.+140    	; 0xa6 <__bad_interrupt>
  1a:	45 c0       	rjmp	.+138    	; 0xa6 <__bad_interrupt>
  1c:	44 c0       	rjmp	.+136    	; 0xa6 <__bad_interrupt>
  1e:	43 c0       	rjmp	.+134    	; 0xa6 <__bad_interrupt>
  20:	42 c0       	rjmp	.+132    	; 0xa6 <__bad_interrupt>
  22:	41 c0       	rjmp	.+130    	; 0xa6 <__bad_interrupt>
  24:	40 c0       	rjmp	.+128    	; 0xa6 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	00 cd       	rjmp	.-1536   	; 0xfffffa28 <__eeprom_end+0xff7efa28>
  28:	d9 14       	cp	r13, r9
  2a:	f1 3c       	cpi	r31, 0xC1	; 193
  2c:	28 e5       	ldi	r18, 0x58	; 88
  2e:	a1 6c       	ori	r26, 0xC1	; 193
  30:	78 b5       	in	r23, 0x28	; 40
  32:	50 9d       	mul	r21, r0
  34:	89 44       	sbci	r24, 0x49	; 73

00000036 <descr_config>:
  36:	09 02 12 00 01 01 00 80 32 09 04 00 00 00 ff 00     ........2.......
	...

00000048 <descr_device>:
  48:	12 01 01 01 ff 00 00 08 81 17 9f 0c 07 01 00 02     ................
  58:	00 01                                               ..

0000005a <string_langid>:
  5a:	04 03 09 04                                         ....

0000005e <string_device>:
  5e:	16 03 55 00 53 00 42 00 74 00 69 00 6e 00 79 00     ..U.S.B.t.i.n.y.
  6e:	49 00 53 00 50 00                                   I.S.P.

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ed       	ldi	r28, 0xDF	; 223
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	10 e0       	ldi	r17, 0x00	; 0
  7e:	a0 e6       	ldi	r26, 0x60	; 96
  80:	b0 e0       	ldi	r27, 0x00	; 0
  82:	e4 ea       	ldi	r30, 0xA4	; 164
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__DATA_REGION_LENGTH__+0xc>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 36       	cpi	r26, 0x62	; 98
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__DATA_REGION_LENGTH__+0x8>

00000092 <__do_clear_bss>:
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	a2 e6       	ldi	r26, 0x62	; 98
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 39       	cpi	r26, 0x9E	; 158
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	91 d2       	rcall	.+1314   	; 0x5c6 <main>
  a4:	7d c3       	rjmp	.+1786   	; 0x7a0 <_exit>

000000a6 <__bad_interrupt>:
  a6:	ac cf       	rjmp	.-168    	; 0x0 <__vectors>

000000a8 <crc>:
	.text
	.global	crc
	.type	crc, @function
crc:
	; crc = 0xffff
	movw	XL, r24
  a8:	dc 01       	movw	r26, r24
	ldi	crc_h, 0xff
  aa:	9f ef       	ldi	r25, 0xFF	; 255
	ldi	crc_l, 0xff
  ac:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	zl, lo8(crc4tab)
  ae:	46 e2       	ldi	r20, 0x26	; 38
	ldi	ZH, hi8(crc4tab)
  b0:	f0 e0       	ldi	r31, 0x00	; 0
	rjmp	entry
  b2:	18 c0       	rjmp	.+48     	; 0xe4 <entry>

000000b4 <next_byte>:

next_byte:
	; crc ^= b
	ld	b, X+
  b4:	2d 91       	ld	r18, X+
	eor	crc_l, b
  b6:	82 27       	eor	r24, r18

	; index1 = crc & 0x0f
	mov	ZL, crc_l
  b8:	e8 2f       	mov	r30, r24
	andi	ZL, 0x0f
  ba:	ef 70       	andi	r30, 0x0F	; 15

	; tmp = crc4tab[index1]
	add	ZL, zl
  bc:	e4 0f       	add	r30, r20
	lpm	tmp, Z+
  be:	35 91       	lpm	r19, Z+

	; index2 = (crc >> 4)
	mov	ZL, crc_l
  c0:	e8 2f       	mov	r30, r24
	swap	ZL
  c2:	e2 95       	swap	r30

	; crc >>= 8
	mov	crc_l, crc_h
  c4:	89 2f       	mov	r24, r25

	; index2 = (index2 ^ tmp) & 0xf
	mov	crc_h, tmp
  c6:	93 2f       	mov	r25, r19
	andi	tmp, 1
  c8:	31 70       	andi	r19, 0x01	; 1
	eor	ZL, tmp
  ca:	e3 27       	eor	r30, r19
	andi	ZL, 0x0f
  cc:	ef 70       	andi	r30, 0x0F	; 15

	; treat upper byte of CRC remainder
	swap	crc_h
  ce:	92 95       	swap	r25
	mov	tmp, crc_h
  d0:	39 2f       	mov	r19, r25
	andi	crc_h, 0x0f
  d2:	9f 70       	andi	r25, 0x0F	; 15
	andi	tmp, 0xe0
  d4:	30 7e       	andi	r19, 0xE0	; 224
	eor	crc_l, tmp
  d6:	83 27       	eor	r24, r19

	; crc ^= crc4tab[index]
	add	ZL, zl
  d8:	e4 0f       	add	r30, r20
	lpm	tmp, Z+
  da:	35 91       	lpm	r19, Z+
	eor	crc_h, tmp
  dc:	93 27       	eor	r25, r19
	andi	tmp, 1
  de:	31 70       	andi	r19, 0x01	; 1
	eor	crc_h, tmp
  e0:	93 27       	eor	r25, r19
	eor	crc_l, tmp
  e2:	83 27       	eor	r24, r19

000000e4 <entry>:

entry:
	; next byte
	dec	len
  e4:	6a 95       	dec	r22
	brpl	next_byte
  e6:	32 f7       	brpl	.-52     	; 0xb4 <next_byte>

000000e8 <done>:

done:
	; crc ^= 0xffff
	com	crc_l
  e8:	80 95       	com	r24
	com	crc_h
  ea:	90 95       	com	r25

	; append crc to buffer
	st	X+, crc_l
  ec:	8d 93       	st	X+, r24
	st	X+, crc_h
  ee:	9d 93       	st	X+, r25

	ret
  f0:	08 95       	ret

000000f2 <__vector_1>:
; This handler must be reached no later than 34 cycles after D+ goes high
; for the first time.
; ----------------------------------------------------------------------
USB_INT_VECTOR:
	; save registers
	push	count
  f2:	0f 93       	push	r16
	push	usbmask
  f4:	1f 93       	push	r17
	push	odd
  f6:	2f 93       	push	r18
	push	YH
  f8:	df 93       	push	r29
	push	YL
  fa:	cf 93       	push	r28
	in	count, SREG
  fc:	0f b7       	in	r16, 0x3f	; 63
	push	count
  fe:	0f 93       	push	r16

00000100 <sync>:
; Synchronize to the pattern 10101011 on D+. This code must be reached
; no later than 47 cycles after D+ goes high for the first time.
; ----------------------------------------------------------------------
sync:
	; wait until D+ == 0
	sbic	USB_IN, USBTINY_DPLUS
 100:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync			; jump if D+ == 1
 102:	fe cf       	rjmp	.-4      	; 0x100 <sync>

00000104 <resync>:
resync:
	; sync on 0-->1 transition on D+ with a 2 cycle resolution
	sbic	USB_IN, USBTINY_DPLUS
 104:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
 106:	0b c0       	rjmp	.+22     	; 0x11e <sync6>
	sbic	USB_IN, USBTINY_DPLUS
 108:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
 10a:	09 c0       	rjmp	.+18     	; 0x11e <sync6>
	sbic	USB_IN, USBTINY_DPLUS
 10c:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
 10e:	07 c0       	rjmp	.+14     	; 0x11e <sync6>
	sbic	USB_IN, USBTINY_DPLUS
 110:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
 112:	05 c0       	rjmp	.+10     	; 0x11e <sync6>
	sbic	USB_IN, USBTINY_DPLUS
 114:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
 116:	03 c0       	rjmp	.+6      	; 0x11e <sync6>
	ldi	count, 1<<USB_INT_PENDING_BIT
 118:	00 e4       	ldi	r16, 0x40	; 64
	out	USB_INT_PENDING, count
 11a:	0a bf       	out	0x3a, r16	; 58
	rjmp	return			; ==> false start, bail out
 11c:	ac c0       	rjmp	.+344    	; 0x276 <return>

0000011e <sync6>:

sync6:
	; we are now between -1 and +1 cycle from the center of the bit
	; following the 0-->1 transition
	lds	YL, usb_rx_off
 11e:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <usb_rx_off>
	clr	YH
 122:	dd 27       	eor	r29, r29
	subi	YL, lo8(-(usb_rx_buf))	; Y = & usb_rx_buf[usb_rx_off]
 124:	c9 57       	subi	r28, 0x79	; 121
	sbci	YH, hi8(-(usb_rx_buf))
 126:	df 4f       	sbci	r29, 0xFF	; 255
	ldi	count, USB_BUFSIZE	; limit on number of bytes to receive
 128:	0b e0       	ldi	r16, 0x0B	; 11
	ldi	usbmask, USB_MASK	; why is there no eori instruction?
 12a:	1c e0       	ldi	r17, 0x0C	; 12
	ldi	odd, USB_MASK_DPLUS
 12c:	24 e0       	ldi	r18, 0x04	; 4

0000012e <sync7>:

sync7:
	; the last sync bit should also be 1
	sbis	USB_IN, USBTINY_DPLUS	; bit 7 of sync byte?
 12e:	82 9b       	sbis	0x10, 2	; 16
	rjmp	resync			; no, wait for next transition
 130:	e9 cf       	rjmp	.-46     	; 0x104 <resync>
	push	byte
 132:	3f 93       	push	r19
	push	fixup
 134:	4f 93       	push	r20
	push	even
 136:	6f 93       	push	r22

; ----------------------------------------------------------------------
; receiver loop
; ----------------------------------------------------------------------
	in	even, USB_IN		; sample bit 0
 138:	60 b3       	in	r22, 0x10	; 16
	ldi	byte, 0x80		; load sync byte for correct unstuffing
 13a:	30 e8       	ldi	r19, 0x80	; 128
	rjmp	rxentry			; 2 cycles
 13c:	03 c0       	rjmp	.+6      	; 0x144 <rxentry>

0000013e <rxloop>:

rxloop:
	in	even, USB_IN		; sample bit 0
 13e:	60 b3       	in	r22, 0x10	; 16
	or	fixup, byte
 140:	43 2b       	or	r20, r19
	st	Y+, fixup		; 2 cycles
 142:	49 93       	st	Y+, r20

00000144 <rxentry>:
rxentry:
	clr	fixup
 144:	44 27       	eor	r20, r20
	andi	even, USB_MASK
 146:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, even
 148:	26 27       	eor	r18, r22
	subi	odd, 1
 14a:	21 50       	subi	r18, 0x01	; 1
	in	odd, USB_IN		; sample bit 1
 14c:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 14e:	2c 70       	andi	r18, 0x0C	; 12
	breq	eop			; ==> EOP detected
 150:	a9 f1       	breq	.+106    	; 0x1bc <eop>
	ror	byte
 152:	37 95       	ror	r19
	cpi	byte, 0xfc
 154:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip0
 156:	a0 f5       	brcc	.+104    	; 0x1c0 <skip0>

00000158 <skipped0>:
skipped0:
	eor	even, odd
 158:	62 27       	eor	r22, r18
	subi	even, 1
 15a:	61 50       	subi	r22, 0x01	; 1
	in	even, USB_IN		; sample bit 2
 15c:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 15e:	6c 70       	andi	r22, 0x0C	; 12
	ror	byte
 160:	37 95       	ror	r19
	cpi	byte, 0xfc
 162:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip1
 164:	98 f5       	brcc	.+102    	; 0x1cc <skip1>

00000166 <skipped1>:
skipped1:
	eor	odd, even
 166:	26 27       	eor	r18, r22
	subi	odd, 1
 168:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 16a:	37 95       	ror	r19
	in	odd, USB_IN		; sample bit 3
 16c:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 16e:	2c 70       	andi	r18, 0x0C	; 12
	cpi	byte, 0xfc
 170:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip2
 172:	90 f5       	brcc	.+100    	; 0x1d8 <skip2>
	eor	even, odd
 174:	62 27       	eor	r22, r18
	subi	even, 1
 176:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 178:	37 95       	ror	r19

0000017a <skipped2>:
skipped2:
	cpi	byte, 0xfc
 17a:	3c 3f       	cpi	r19, 0xFC	; 252
	in	even, USB_IN		; sample bit 4
 17c:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 17e:	6c 70       	andi	r22, 0x0C	; 12
	brcc	skip3
 180:	a0 f5       	brcc	.+104    	; 0x1ea <skip3>
	eor	odd, even
 182:	26 27       	eor	r18, r22
	subi	odd, 1
 184:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 186:	37 95       	ror	r19

00000188 <skipped4>:
skipped4:
	cpi	byte, 0xfc
 188:	3c 3f       	cpi	r19, 0xFC	; 252

0000018a <skipped3>:
skipped3:
	brcc	skip4
 18a:	c8 f5       	brcc	.+114    	; 0x1fe <skip4>
	in	odd, USB_IN		; sample bit 5
 18c:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 18e:	2c 70       	andi	r18, 0x0C	; 12
	eor	even, odd
 190:	62 27       	eor	r22, r18
	subi	even, 1
 192:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 194:	37 95       	ror	r19

00000196 <skipped5>:
skipped5:
	cpi	byte, 0xfc
 196:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip5
 198:	b0 f5       	brcc	.+108    	; 0x206 <skip5>
	dec	count
 19a:	0a 95       	dec	r16
	in	even, USB_IN		; sample bit 6
 19c:	60 b3       	in	r22, 0x10	; 16
	brmi	overflow		; ==> overflow
 19e:	7a f0       	brmi	.+30     	; 0x1be <overflow>
	andi	even, USB_MASK
 1a0:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, even
 1a2:	26 27       	eor	r18, r22
	subi	odd, 1
 1a4:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 1a6:	37 95       	ror	r19

000001a8 <skipped6>:
skipped6:
	cpi	byte, 0xfc
 1a8:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip6
 1aa:	88 f5       	brcc	.+98     	; 0x20e <skip6>
	in	odd, USB_IN		; sample bit 7
 1ac:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 1ae:	2c 70       	andi	r18, 0x0C	; 12
	eor	even, odd
 1b0:	62 27       	eor	r22, r18
	subi	even, 1
 1b2:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 1b4:	37 95       	ror	r19
	cpi	byte, 0xfc
 1b6:	3c 3f       	cpi	r19, 0xFC	; 252
	brcs	rxloop			; 2 cycles
 1b8:	10 f2       	brcs	.-124    	; 0x13e <rxloop>
	rjmp	skip7
 1ba:	2d c0       	rjmp	.+90     	; 0x216 <skip7>

000001bc <eop>:

eop:
	rjmp	eop2
 1bc:	31 c0       	rjmp	.+98     	; 0x220 <eop2>

000001be <overflow>:
overflow:
	rjmp	ignore
 1be:	52 c0       	rjmp	.+164    	; 0x264 <ignore>

000001c0 <skip0>:

; ----------------------------------------------------------------------
; out-of-line code to skip stuffing bits
; ----------------------------------------------------------------------
skip0:					; 1+6 cycles
	eor	even, usbmask
 1c0:	61 27       	eor	r22, r17
	in	odd, USB_IN		; resample bit 1
 1c2:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 1c4:	2c 70       	andi	r18, 0x0C	; 12
	cbr	byte, (1<<7)
 1c6:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<0)
 1c8:	41 60       	ori	r20, 0x01	; 1
	rjmp	skipped0
 1ca:	c6 cf       	rjmp	.-116    	; 0x158 <skipped0>

000001cc <skip1>:

skip1:					; 2+5 cycles
	cbr	byte, (1<<7)
 1cc:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<1)
 1ce:	42 60       	ori	r20, 0x02	; 2
	in	even, USB_IN		; resample bit 2
 1d0:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 1d2:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, usbmask
 1d4:	21 27       	eor	r18, r17
	rjmp	skipped1
 1d6:	c7 cf       	rjmp	.-114    	; 0x166 <skipped1>

000001d8 <skip2>:

skip2:					; 3+7 cycles
	cbr	byte, (1<<7)
 1d8:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<2)
 1da:	44 60       	ori	r20, 0x04	; 4
	eor	even, usbmask
 1dc:	61 27       	eor	r22, r17
	in	odd, USB_IN		; resample bit 3
 1de:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 1e0:	2c 70       	andi	r18, 0x0C	; 12
	eor	even, odd
 1e2:	62 27       	eor	r22, r18
	subi	even, 1
 1e4:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 1e6:	37 95       	ror	r19
	rjmp	skipped2
 1e8:	c8 cf       	rjmp	.-112    	; 0x17a <skipped2>

000001ea <skip3>:

skip3:					; 4+7 cycles
	cbr	byte, (1<<7)
 1ea:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<3)
 1ec:	48 60       	ori	r20, 0x08	; 8
	eor	odd, usbmask
 1ee:	21 27       	eor	r18, r17
	ori	byte, 1
 1f0:	31 60       	ori	r19, 0x01	; 1
	in	even, USB_IN		; resample bit 4
 1f2:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 1f4:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, even
 1f6:	26 27       	eor	r18, r22
	subi	odd, 1
 1f8:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 1fa:	37 95       	ror	r19
	rjmp	skipped3
 1fc:	c6 cf       	rjmp	.-116    	; 0x18a <skipped3>

000001fe <skip4>:

skip4:					; 5 cycles
	cbr	byte, (1<<7)
 1fe:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<4)
 200:	40 61       	ori	r20, 0x10	; 16
	eor	even, usbmask
 202:	61 27       	eor	r22, r17
	rjmp	skipped4
 204:	c1 cf       	rjmp	.-126    	; 0x188 <skipped4>

00000206 <skip5>:

skip5:					; 5 cycles
	cbr	byte, (1<<7)
 206:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<5)
 208:	40 62       	ori	r20, 0x20	; 32
	eor	odd, usbmask
 20a:	21 27       	eor	r18, r17
	rjmp	skipped5
 20c:	c4 cf       	rjmp	.-120    	; 0x196 <skipped5>

0000020e <skip6>:

skip6:					; 5 cycles
	cbr	byte, (1<<7)
 20e:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<6)
 210:	40 64       	ori	r20, 0x40	; 64
	eor	even, usbmask
 212:	61 27       	eor	r22, r17
	rjmp	skipped6
 214:	c9 cf       	rjmp	.-110    	; 0x1a8 <skipped6>

00000216 <skip7>:

skip7:					; 7 cycles
	cbr	byte, (1<<7)
 216:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<7)
 218:	40 68       	ori	r20, 0x80	; 128
	eor	odd, usbmask
 21a:	21 27       	eor	r18, r17
	nop2
 21c:	00 c0       	rjmp	.+0      	; 0x21e <skip7+0x8>
	rjmp	rxloop
 21e:	8f cf       	rjmp	.-226    	; 0x13e <rxloop>

00000220 <eop2>:
; ----------------------------------------------------------------------
; end-of-packet detected (worst-case: 3 cycles after end of SE0)
; ----------------------------------------------------------------------
eop2:
	; clear pending interrupt (SE0+3)
	ldi	byte, 1<<USB_INT_PENDING_BIT
 220:	30 e4       	ldi	r19, 0x40	; 64
	out	USB_INT_PENDING, byte	; clear pending bit at end of packet
 222:	3a bf       	out	0x3a, r19	; 58
	; calculate packet length
	subi	count, USB_BUFSIZE
 224:	0b 50       	subi	r16, 0x0B	; 11
	neg	count			; count = packet length
 226:	01 95       	neg	r16
	; get PID
	sub	YL, count
 228:	c0 1b       	sub	r28, r16
	sbci	YH, 0
 22a:	d0 40       	sbci	r29, 0x00	; 0
	ld	pid, Y
 22c:	28 81       	ld	r18, Y
	; separate out the non-Token packets (SE0+11)
	sbrc	pid, 1
 22e:	21 fd       	sbrc	r18, 1
	rjmp	is_data_handshake	; jump for Data or Handshake packet
 230:	2d c0       	rjmp	.+90     	; 0x28c <is_data_handshake>
	; check ADDR of Token packet (SE0+13)
	ldd	addr, Y+1
 232:	19 81       	ldd	r17, Y+1	; 0x01
	andi	addr, 0x7f
 234:	1f 77       	andi	r17, 0x7F	; 127
	lds	tmp, usb_address
 236:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <usb_address>
	cp	addr, tmp		; is this packet for me?
 23a:	14 17       	cp	r17, r20
	brne	ignore			; no, ignore
 23c:	99 f4       	brne	.+38     	; 0x264 <ignore>
	; dispatch Token packets (SE0+20)
	cpi	pid, USB_PID_IN
 23e:	29 36       	cpi	r18, 0x69	; 105
	brne	is_setup_out		; handle SETUP and OUT packets
 240:	91 f4       	brne	.+36     	; 0x266 <ignore0>

; ----------------------------------------------------------------------
; Handle IN (SE0+22)
; ----------------------------------------------------------------------
	lds	count, usb_tx_len
 242:	00 91 77 00 	lds	r16, 0x0077	; 0x800077 <usb_tx_len>
	tst	count			; data ready?
 246:	00 23       	and	r16, r16
	breq	nak			; no, reply with NAK
 248:	f1 f0       	breq	.+60     	; 0x286 <nak>
	lds	tmp, usb_rx_len
 24a:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <usb_rx_len>
	tst	tmp			; unprocessed input packet?
 24e:	44 23       	and	r20, r20
	brne	nak			; yes, don't send old data for new packet
 250:	d1 f4       	brne	.+52     	; 0x286 <nak>
	sts	usb_tx_len, tmp		; buffer is available again (after reti)
 252:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <usb_tx_len>
	lds	tmp, usb_new_address
 256:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <usb_new_address>
	sts	usb_address, tmp	; assign new address at end of transfer
 25a:	40 93 9d 00 	sts	0x009D, r20	; 0x80009d <usb_address>
	ldi	YL, lo8(usb_tx_buf)
 25e:	c8 e7       	ldi	r28, 0x78	; 120
	ldi	YH, hi8(usb_tx_buf)
 260:	d0 e0       	ldi	r29, 0x00	; 0
	rjmp	send_packet		; SE0+40, SE0 --> SOP <= 51
 262:	2b c0       	rjmp	.+86     	; 0x2ba <send_packet>

00000264 <ignore>:

; ----------------------------------------------------------------------
; exit point for ignored packets (SE0+21)
; ----------------------------------------------------------------------
ignore:
	clr	pid
 264:	22 27       	eor	r18, r18

00000266 <ignore0>:

; ----------------------------------------------------------------------
; Handle SETUP/OUT (SE0+23)
; ----------------------------------------------------------------------
is_setup_out:
	sts	token_pid, pid		; save PID of token packet
 266:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
	pop	even
 26a:	6f 91       	pop	r22
	pop	fixup
 26c:	4f 91       	pop	r20
	pop	byte
 26e:	3f 91       	pop	r19
	in	count, USB_INT_PENDING	; next packet already started?
 270:	0a b7       	in	r16, 0x3a	; 58
	sbrc	count, USB_INT_PENDING_BIT
 272:	06 fd       	sbrc	r16, 6
	rjmp	sync			; yes, get it right away (SE0+35)
 274:	45 cf       	rjmp	.-374    	; 0x100 <sync>

00000276 <return>:

; ----------------------------------------------------------------------
; restore registers and return from interrupt (SE0+34)
; ----------------------------------------------------------------------
return:
	pop	count
 276:	0f 91       	pop	r16
	out	SREG, count
 278:	0f bf       	out	0x3f, r16	; 63
	pop	YL
 27a:	cf 91       	pop	r28
	pop	YH
 27c:	df 91       	pop	r29
	pop	odd
 27e:	2f 91       	pop	r18
	pop	usbmask
 280:	1f 91       	pop	r17
	pop	count
 282:	0f 91       	pop	r16
	reti
 284:	18 95       	reti

00000286 <nak>:

; ----------------------------------------------------------------------
; send NAK packet (SE0+31)
; ----------------------------------------------------------------------
nak:
	ldi	YL, lo8(tx_nak)
 286:	c0 e6       	ldi	r28, 0x60	; 96
	ldi	YH, hi8(tx_nak)
 288:	d0 e0       	ldi	r29, 0x00	; 0
	rjmp	send_token
 28a:	16 c0       	rjmp	.+44     	; 0x2b8 <send_token>

0000028c <is_data_handshake>:

; ----------------------------------------------------------------------
; Handle Data and Handshake packets (SE0+14)
; ----------------------------------------------------------------------
is_data_handshake:
	andi	pid, 0x01
 28c:	21 70       	andi	r18, 0x01	; 1
	breq	ignore0			; ignore ACK/NAK/STALL
 28e:	59 f3       	breq	.-42     	; 0x266 <ignore0>

; ----------------------------------------------------------------------
; Handle DATA0/DATA1 (SE0+16)
; ----------------------------------------------------------------------
	lds	pid, token_pid
 290:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
	tst	pid			; data following our SETUP/OUT
 294:	22 23       	and	r18, r18
	breq	ignore0			; no, ignore
 296:	39 f3       	breq	.-50     	; 0x266 <ignore0>
	lds	tmp, usb_rx_len
 298:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <usb_rx_len>
	tst	tmp			; buffer free?
 29c:	44 23       	and	r20, r20
	brne	nak			; no, reply with NAK
 29e:	99 f7       	brne	.-26     	; 0x286 <nak>
	sts	usb_rx_len, count	; pass buffer length
 2a0:	00 93 85 00 	sts	0x0085, r16	; 0x800085 <usb_rx_len>
	sts	usb_rx_token, pid	; pass PID of token (SETUP or OUT)
 2a4:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <usb_rx_token>
	lds	count, usb_rx_off	; switch to other input buffer
 2a8:	00 91 86 00 	lds	r16, 0x0086	; 0x800086 <usb_rx_off>
	ldi	tmp, USB_BUFSIZE
 2ac:	4b e0       	ldi	r20, 0x0B	; 11
	sub	tmp, count
 2ae:	40 1b       	sub	r20, r16
	sts	usb_rx_off, tmp
 2b0:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <usb_rx_off>

; ----------------------------------------------------------------------
; send ACK packet (SE0+34)
; ----------------------------------------------------------------------
	ldi	YL, lo8(tx_ack)
 2b4:	c1 e6       	ldi	r28, 0x61	; 97
	ldi	YH, hi8(tx_ack)
 2b6:	d0 e0       	ldi	r29, 0x00	; 0

000002b8 <send_token>:
send_token:
	ldi	count, 1		; SE0+37, SE0 --> SOP <= 48
 2b8:	01 e0       	ldi	r16, 0x01	; 1

000002ba <send_packet>:

; ----------------------------------------------------------------------
; acquire the bus and send a packet (11 cycles to SOP)
; ----------------------------------------------------------------------
send_packet:
	in	output, USB_OUT
 2ba:	22 b3       	in	r18, 0x12	; 18
	cbr	output, USB_MASK
 2bc:	23 7f       	andi	r18, 0xF3	; 243
	ori	output, USB_MASK_DMINUS
 2be:	28 60       	ori	r18, 0x08	; 8
	in	usbmask, USB_DDR
 2c0:	11 b3       	in	r17, 0x11	; 17
	ori	usbmask, USB_MASK
 2c2:	1c 60       	ori	r17, 0x0C	; 12
	out	USB_OUT, output		; idle state
 2c4:	22 bb       	out	0x12, r18	; 18
	out	USB_DDR, usbmask	; acquire bus
 2c6:	11 bb       	out	0x11, r17	; 17
	ldi	usbmask, USB_MASK
 2c8:	1c e0       	ldi	r17, 0x0C	; 12
	ldi	byte, 0x80		; start with sync byte
 2ca:	30 e8       	ldi	r19, 0x80	; 128

000002cc <txloop>:

; ----------------------------------------------------------------------
; transmitter loop
; ----------------------------------------------------------------------
txloop:
	sbrs	byte, 0
 2cc:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2ce:	21 27       	eor	r18, r17
	out	USB_OUT, output		; output bit 0
 2d0:	22 bb       	out	0x12, r18	; 18
	ror	byte
 2d2:	37 95       	ror	r19
	ror	done
 2d4:	47 95       	ror	r20

000002d6 <stuffed0>:
stuffed0:
	cpi	done, 0xfc
 2d6:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff0
 2d8:	c0 f5       	brcc	.+112    	; 0x34a <stuff0>
	sbrs	byte, 0
 2da:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2dc:	21 27       	eor	r18, r17
	ror	byte
 2de:	37 95       	ror	r19

000002e0 <stuffed1>:
stuffed1:
	out	USB_OUT, output		; output bit 1
 2e0:	22 bb       	out	0x12, r18	; 18
	ror	done
 2e2:	47 95       	ror	r20
	cpi	done, 0xfc
 2e4:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff1
 2e6:	a8 f5       	brcc	.+106    	; 0x352 <stuff1>
	sbrs	byte, 0
 2e8:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2ea:	21 27       	eor	r18, r17
	ror	byte
 2ec:	37 95       	ror	r19
	...

000002f0 <stuffed2>:
	nop
stuffed2:
	out	USB_OUT, output		; output bit 2
 2f0:	22 bb       	out	0x12, r18	; 18
	ror	done
 2f2:	47 95       	ror	r20
	cpi	done, 0xfc
 2f4:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff2
 2f6:	78 f5       	brcc	.+94     	; 0x356 <stuff2>
	sbrs	byte, 0
 2f8:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2fa:	21 27       	eor	r18, r17
	ror	byte
 2fc:	37 95       	ror	r19
	...

00000300 <stuffed3>:
	nop
stuffed3:
	out	USB_OUT, output		; output bit 3
 300:	22 bb       	out	0x12, r18	; 18
	ror	done
 302:	47 95       	ror	r20
	cpi	done, 0xfc
 304:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff3
 306:	48 f5       	brcc	.+82     	; 0x35a <stuff3>
	sbrs	byte, 0
 308:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 30a:	21 27       	eor	r18, r17
	ld	next, Y+		; 2 cycles
 30c:	69 91       	ld	r22, Y+
	out	USB_OUT, output		; output bit 4
 30e:	22 bb       	out	0x12, r18	; 18
	ror	byte
 310:	37 95       	ror	r19
	ror	done
 312:	47 95       	ror	r20

00000314 <stuffed4>:
stuffed4:
	cpi	done, 0xfc
 314:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff4
 316:	18 f5       	brcc	.+70     	; 0x35e <stuff4>
	sbrs	byte, 0
 318:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 31a:	21 27       	eor	r18, r17
	ror	byte
 31c:	37 95       	ror	r19

0000031e <stuffed5>:
stuffed5:
	out	USB_OUT, output		; output bit 5
 31e:	22 bb       	out	0x12, r18	; 18
	ror	done
 320:	47 95       	ror	r20
	cpi	done, 0xfc
 322:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff5
 324:	00 f5       	brcc	.+64     	; 0x366 <stuff5>
	sbrs	byte, 0
 326:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 328:	21 27       	eor	r18, r17
	ror	byte
 32a:	37 95       	ror	r19

0000032c <stuffed6>:
stuffed6:
	ror	done
 32c:	47 95       	ror	r20
	out	USB_OUT, output		; output bit 6
 32e:	22 bb       	out	0x12, r18	; 18
	cpi	done, 0xfc
 330:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff6
 332:	d8 f4       	brcc	.+54     	; 0x36a <stuff6>
	sbrs	byte, 0
 334:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 336:	21 27       	eor	r18, r17
	ror	byte
 338:	37 95       	ror	r19
	mov	byte, next
 33a:	36 2f       	mov	r19, r22

0000033c <stuffed7>:
stuffed7:
	ror	done
 33c:	47 95       	ror	r20
	out	USB_OUT, output		; output bit 7
 33e:	22 bb       	out	0x12, r18	; 18
	cpi	done, 0xfc
 340:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff7
 342:	a8 f4       	brcc	.+42     	; 0x36e <stuff7>
	dec	count
 344:	0a 95       	dec	r16
	brpl	txloop			; 2 cycles
 346:	12 f6       	brpl	.-124    	; 0x2cc <txloop>

	rjmp	gen_eop
 348:	14 c0       	rjmp	.+40     	; 0x372 <gen_eop>

0000034a <stuff0>:

; ----------------------------------------------------------------------
; out-of-line code to insert stuffing bits
; ----------------------------------------------------------------------
stuff0:					; 2+3
	eor	output, usbmask
 34a:	21 27       	eor	r18, r17
	clr	done
 34c:	44 27       	eor	r20, r20
	out	USB_OUT, output
 34e:	22 bb       	out	0x12, r18	; 18
	rjmp	stuffed0
 350:	c2 cf       	rjmp	.-124    	; 0x2d6 <stuffed0>

00000352 <stuff1>:

stuff1:					; 3
	eor	output, usbmask
 352:	21 27       	eor	r18, r17
	rjmp	stuffed1
 354:	c5 cf       	rjmp	.-118    	; 0x2e0 <stuffed1>

00000356 <stuff2>:

stuff2:					; 3
	eor	output, usbmask
 356:	21 27       	eor	r18, r17
	rjmp	stuffed2
 358:	cb cf       	rjmp	.-106    	; 0x2f0 <stuffed2>

0000035a <stuff3>:

stuff3:					; 3
	eor	output, usbmask
 35a:	21 27       	eor	r18, r17
	rjmp	stuffed3
 35c:	d1 cf       	rjmp	.-94     	; 0x300 <stuffed3>

0000035e <stuff4>:

stuff4:					; 2+3
	eor	output, usbmask
 35e:	21 27       	eor	r18, r17
	clr	done
 360:	44 27       	eor	r20, r20
	out	USB_OUT, output
 362:	22 bb       	out	0x12, r18	; 18
	rjmp	stuffed4
 364:	d7 cf       	rjmp	.-82     	; 0x314 <stuffed4>

00000366 <stuff5>:

stuff5:					; 3
	eor	output, usbmask
 366:	21 27       	eor	r18, r17
	rjmp	stuffed5
 368:	da cf       	rjmp	.-76     	; 0x31e <stuffed5>

0000036a <stuff6>:

stuff6:					; 3
	eor	output, usbmask
 36a:	21 27       	eor	r18, r17
	rjmp	stuffed6
 36c:	df cf       	rjmp	.-66     	; 0x32c <stuffed6>

0000036e <stuff7>:

stuff7:					; 3
	eor	output, usbmask
 36e:	21 27       	eor	r18, r17
	rjmp	stuffed7
 370:	e5 cf       	rjmp	.-54     	; 0x33c <stuffed7>

00000372 <gen_eop>:

; ----------------------------------------------------------------------
; generate EOP, release the bus, and return from interrupt
; ----------------------------------------------------------------------
gen_eop:
	cbr	output, USB_MASK
 372:	23 7f       	andi	r18, 0xF3	; 243
	out	USB_OUT, output		; output SE0 for 2 bit times
 374:	22 bb       	out	0x12, r18	; 18
	pop	even
 376:	6f 91       	pop	r22
	pop	fixup
 378:	4f 91       	pop	r20
	pop	byte
 37a:	3f 91       	pop	r19
	ldi	count, 1<<USB_INT_PENDING_BIT
 37c:	00 e4       	ldi	r16, 0x40	; 64
	out	USB_INT_PENDING, count	; interrupt was triggered by transmit
 37e:	0a bf       	out	0x3a, r16	; 58
	pop	YH			; this is the saved SREG
 380:	df 91       	pop	r29
	pop	YL
 382:	cf 91       	pop	r28
	in	usbmask, USB_DDR
 384:	11 b3       	in	r17, 0x11	; 17
	mov	count, output
 386:	02 2f       	mov	r16, r18
	ori	output, USB_MASK_DMINUS
 388:	28 60       	ori	r18, 0x08	; 8
	out	USB_OUT, output		; output J state for 1 bit time
 38a:	22 bb       	out	0x12, r18	; 18
	cbr	usbmask, USB_MASK
 38c:	13 7f       	andi	r17, 0xF3	; 243
	out	SREG, YH
 38e:	df bf       	out	0x3f, r29	; 63
	pop	YH
 390:	df 91       	pop	r29
	pop	odd			; is the same register as output!
 392:	2f 91       	pop	r18
	nop
 394:	00 00       	nop
	out	USB_DDR, usbmask	; release bus
 396:	11 bb       	out	0x11, r17	; 17
	out	USB_OUT, count		; disable D- pullup
 398:	02 bb       	out	0x12, r16	; 18
	pop	usbmask
 39a:	1f 91       	pop	r17
	pop	count
 39c:	0f 91       	pop	r16
	reti
 39e:	18 95       	reti

000003a0 <spiTest>:
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <START_L0>

000003a2 <DELAY_L0>:
 3a2:	08 95       	ret

000003a4 <START_L0>:
 3a4:	0f 93       	push	r16
 3a6:	0f b7       	in	r16, 0x3f	; 63
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	d0 e0       	ldi	r29, 0x00	; 0
 3ba:	c8 2f       	mov	r28, r24
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	e6 2f       	mov	r30, r22
 3c0:	04 2f       	mov	r16, r20
 3c2:	c7 98       	cbi	0x18, 7	; 24

000003c4 <SPI_BYTES_LOOP_L0>:
 3c4:	19 91       	ld	r17, Y+
 3c6:	28 e0       	ldi	r18, 0x08	; 8

000003c8 <SPI_BITS_LOOP_L0>:
 3c8:	17 ff       	sbrs	r17, 7
 3ca:	c5 98       	cbi	0x18, 5	; 24
 3cc:	17 fd       	sbrc	r17, 7
 3ce:	c5 9a       	sbi	0x18, 5	; 24
 3d0:	11 0f       	add	r17, r17
 3d2:	00 00       	nop
 3d4:	b6 99       	sbic	0x16, 6	; 22
 3d6:	11 60       	ori	r17, 0x01	; 1
 3d8:	c7 9a       	sbi	0x18, 7	; 24
 3da:	00 00       	nop
 3dc:	c7 98       	cbi	0x18, 7	; 24
 3de:	2a 95       	dec	r18
 3e0:	99 f7       	brne	.-26     	; 0x3c8 <SPI_BITS_LOOP_L0>
 3e2:	11 93       	st	Z+, r17
 3e4:	0a 95       	dec	r16
 3e6:	71 f7       	brne	.-36     	; 0x3c4 <SPI_BYTES_LOOP_L0>
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	3f 91       	pop	r19
 3f2:	2f 91       	pop	r18
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	0f bf       	out	0x3f, r16	; 63
 3fa:	0f 91       	pop	r16
 3fc:	08 95       	ret

000003fe <spi_rw>:
 3fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <address>
 402:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <address+0x1>
 406:	9c 01       	movw	r18, r24
 408:	2f 5f       	subi	r18, 0xFF	; 255
 40a:	3f 4f       	sbci	r19, 0xFF	; 255
 40c:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <address+0x1>
 410:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <address>
 414:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <cmd0>
 418:	27 ff       	sbrs	r18, 7
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	80 fd       	sbrc	r24, 0
 422:	28 60       	ori	r18, 0x08	; 8
 424:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <cmd>
 428:	29 2f       	mov	r18, r25
 42a:	26 95       	lsr	r18
 42c:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <cmd+0x1>
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <cmd+0x2>
 438:	44 e0       	ldi	r20, 0x04	; 4
 43a:	63 e6       	ldi	r22, 0x63	; 99
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	87 e6       	ldi	r24, 0x67	; 103
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	ae cf       	rjmp	.-164    	; 0x3a0 <spiTest>

00000444 <usb_setup>:
 444:	fc 01       	movw	r30, r24
 446:	81 81       	ldd	r24, Z+1	; 0x01
 448:	88 23       	and	r24, r24
 44a:	09 f4       	brne	.+2      	; 0x44e <usb_setup+0xa>
 44c:	58 c0       	rjmp	.+176    	; 0x4fe <usb_setup+0xba>
 44e:	85 30       	cpi	r24, 0x05	; 5
 450:	69 f4       	brne	.+26     	; 0x46c <usb_setup+0x28>
 452:	82 81       	ldd	r24, Z+2	; 0x02
 454:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <sck_period>
 458:	84 81       	ldd	r24, Z+4	; 0x04
 45a:	88 23       	and	r24, r24
 45c:	11 f0       	breq	.+4      	; 0x462 <usb_setup+0x1e>
 45e:	81 e1       	ldi	r24, 0x11	; 17
 460:	01 c0       	rjmp	.+2      	; 0x464 <usb_setup+0x20>
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	88 bb       	out	0x18, r24	; 24
 466:	81 eb       	ldi	r24, 0xB1	; 177
 468:	87 bb       	out	0x17, r24	; 23
 46a:	47 c0       	rjmp	.+142    	; 0x4fa <usb_setup+0xb6>
 46c:	86 30       	cpi	r24, 0x06	; 6
 46e:	21 f4       	brne	.+8      	; 0x478 <usb_setup+0x34>
 470:	80 e1       	ldi	r24, 0x10	; 16
 472:	87 bb       	out	0x17, r24	; 23
 474:	88 bb       	out	0x18, r24	; 24
 476:	41 c0       	rjmp	.+130    	; 0x4fa <usb_setup+0xb6>
 478:	87 30       	cpi	r24, 0x07	; 7
 47a:	39 f4       	brne	.+14     	; 0x48a <usb_setup+0x46>
 47c:	44 e0       	ldi	r20, 0x04	; 4
 47e:	bf 01       	movw	r22, r30
 480:	cf 01       	movw	r24, r30
 482:	02 96       	adiw	r24, 0x02	; 2
 484:	8d df       	rcall	.-230    	; 0x3a0 <spiTest>
 486:	84 e0       	ldi	r24, 0x04	; 4
 488:	08 95       	ret
 48a:	8e 30       	cpi	r24, 0x0E	; 14
 48c:	39 f4       	brne	.+14     	; 0x49c <usb_setup+0x58>
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	bf 01       	movw	r22, r30
 492:	cf 01       	movw	r24, r30
 494:	02 96       	adiw	r24, 0x02	; 2
 496:	84 df       	rcall	.-248    	; 0x3a0 <spiTest>
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	08 95       	ret
 49c:	88 30       	cpi	r24, 0x08	; 8
 49e:	39 f4       	brne	.+14     	; 0x4ae <usb_setup+0x6a>
 4a0:	82 81       	ldd	r24, Z+2	; 0x02
 4a2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <poll1>
 4a6:	83 81       	ldd	r24, Z+3	; 0x03
 4a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <poll2>
 4ac:	26 c0       	rjmp	.+76     	; 0x4fa <usb_setup+0xb6>
 4ae:	9f ef       	ldi	r25, 0xFF	; 255
 4b0:	98 0f       	add	r25, r24
 4b2:	94 30       	cpi	r25, 0x04	; 4
 4b4:	10 f1       	brcs	.+68     	; 0x4fa <usb_setup+0xb6>
 4b6:	8d 30       	cpi	r24, 0x0D	; 13
 4b8:	01 f1       	breq	.+64     	; 0x4fa <usb_setup+0xb6>
 4ba:	24 81       	ldd	r18, Z+4	; 0x04
 4bc:	35 81       	ldd	r19, Z+5	; 0x05
 4be:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <address+0x1>
 4c2:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <address>
 4c6:	89 30       	cpi	r24, 0x09	; 9
 4c8:	11 f4       	brne	.+4      	; 0x4ce <usb_setup+0x8a>
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <usb_setup+0x90>
 4ce:	8b 30       	cpi	r24, 0x0B	; 11
 4d0:	29 f4       	brne	.+10     	; 0x4dc <usb_setup+0x98>
 4d2:	80 ea       	ldi	r24, 0xA0	; 160
 4d4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <cmd0>
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	08 95       	ret
 4dc:	22 81       	ldd	r18, Z+2	; 0x02
 4de:	33 81       	ldd	r19, Z+3	; 0x03
 4e0:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <timeout+0x1>
 4e4:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <timeout>
 4e8:	8a 30       	cpi	r24, 0x0A	; 10
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <usb_setup+0xac>
 4ec:	80 e4       	ldi	r24, 0x40	; 64
 4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <usb_setup+0xb2>
 4f0:	8c 30       	cpi	r24, 0x0C	; 12
 4f2:	19 f4       	brne	.+6      	; 0x4fa <usb_setup+0xb6>
 4f4:	80 ec       	ldi	r24, 0xC0	; 192
 4f6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <cmd0>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
 4fe:	88 e0       	ldi	r24, 0x08	; 8
 500:	08 95       	ret

00000502 <usb_in>:
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	16 2f       	mov	r17, r22
 50e:	ec 01       	movw	r28, r24
 510:	7c 01       	movw	r14, r24
 512:	e6 0e       	add	r14, r22
 514:	f1 1c       	adc	r15, r1
 516:	ce 15       	cp	r28, r14
 518:	df 05       	cpc	r29, r15
 51a:	29 f0       	breq	.+10     	; 0x526 <usb_in+0x24>
 51c:	70 df       	rcall	.-288    	; 0x3fe <spi_rw>
 51e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <res+0x3>
 522:	89 93       	st	Y+, r24
 524:	f8 cf       	rjmp	.-16     	; 0x516 <usb_in+0x14>
 526:	81 2f       	mov	r24, r17
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	ff 90       	pop	r15
 530:	ef 90       	pop	r14
 532:	08 95       	ret

00000534 <usb_out>:
 534:	df 92       	push	r13
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	ec 01       	movw	r28, r24
 544:	7c 01       	movw	r14, r24
 546:	e6 0e       	add	r14, r22
 548:	f1 1c       	adc	r15, r1
 54a:	30 e6       	ldi	r19, 0x60	; 96
 54c:	d3 2e       	mov	r13, r19
 54e:	ce 15       	cp	r28, r14
 550:	df 05       	cpc	r29, r15
 552:	89 f1       	breq	.+98     	; 0x5b6 <usb_out+0x82>
 554:	89 91       	ld	r24, Y+
 556:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <cmd+0x3>
 55a:	51 df       	rcall	.-350    	; 0x3fe <spi_rw>
 55c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <cmd>
 560:	8d 25       	eor	r24, r13
 562:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <cmd>
 566:	00 e0       	ldi	r16, 0x00	; 0
 568:	10 e0       	ldi	r17, 0x00	; 0
 56a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <timeout>
 56e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <timeout+0x1>
 572:	08 17       	cp	r16, r24
 574:	19 07       	cpc	r17, r25
 576:	58 f7       	brcc	.-42     	; 0x54e <usb_out+0x1a>
 578:	44 e0       	ldi	r20, 0x04	; 4
 57a:	63 e6       	ldi	r22, 0x63	; 99
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	87 e6       	ldi	r24, 0x67	; 103
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e df       	rcall	.-484    	; 0x3a0 <spiTest>
 584:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <res+0x3>
 588:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <cmd+0x3>
 58c:	89 13       	cpse	r24, r25
 58e:	08 c0       	rjmp	.+16     	; 0x5a0 <usb_out+0x6c>
 590:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <poll1>
 594:	89 17       	cp	r24, r25
 596:	21 f0       	breq	.+8      	; 0x5a0 <usb_out+0x6c>
 598:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <poll2>
 59c:	89 13       	cpse	r24, r25
 59e:	d7 cf       	rjmp	.-82     	; 0x54e <usb_out+0x1a>
 5a0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <sck_period>
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	25 e0       	ldi	r18, 0x05	; 5
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	2a 95       	dec	r18
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <usb_out+0x74>
 5b0:	08 0f       	add	r16, r24
 5b2:	19 1f       	adc	r17, r25
 5b4:	da cf       	rjmp	.-76     	; 0x56a <usb_out+0x36>
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	df 90       	pop	r13
 5c4:	08 95       	ret

000005c6 <main>:
 5c6:	80 e1       	ldi	r24, 0x10	; 16
 5c8:	87 bb       	out	0x17, r24	; 23
 5ca:	88 bb       	out	0x18, r24	; 24
 5cc:	02 d0       	rcall	.+4      	; 0x5d2 <usb_init>
 5ce:	0c d0       	rcall	.+24     	; 0x5e8 <usb_poll>
 5d0:	fe cf       	rjmp	.-4      	; 0x5ce <main+0x8>

000005d2 <usb_init>:
 5d2:	85 b7       	in	r24, 0x35	; 53
 5d4:	83 60       	ori	r24, 0x03	; 3
 5d6:	85 bf       	out	0x35, r24	; 53
 5d8:	8b b7       	in	r24, 0x3b	; 59
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	8b bf       	out	0x3b, r24	; 59
 5de:	8d 9a       	sbi	0x11, 5	; 17
 5e0:	94 9a       	sbi	0x12, 4	; 18
 5e2:	8c 9a       	sbi	0x11, 4	; 17
 5e4:	78 94       	sei
 5e6:	08 95       	ret

000005e8 <usb_poll>:
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <usb_rx_len>
 5f2:	66 23       	and	r22, r22
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <usb_poll+0x10>
 5f6:	6f c0       	rjmp	.+222    	; 0x6d6 <usb_poll+0xee>
 5f8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <usb_rx_off>
 5fc:	cc e0       	ldi	r28, 0x0C	; 12
 5fe:	d0 e0       	ldi	r29, 0x00	; 0
 600:	c8 1b       	sub	r28, r24
 602:	d1 09       	sbc	r29, r1
 604:	c9 57       	subi	r28, 0x79	; 121
 606:	df 4f       	sbci	r29, 0xFF	; 255
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <usb_tx_state>
 60e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <usb_rx_token>
 612:	8d 32       	cpi	r24, 0x2D	; 45
 614:	09 f0       	breq	.+2      	; 0x618 <usb_poll+0x30>
 616:	51 c0       	rjmp	.+162    	; 0x6ba <usb_poll+0xd2>
 618:	1e 81       	ldd	r17, Y+6	; 0x06
 61a:	8f 81       	ldd	r24, Y+7	; 0x07
 61c:	81 11       	cpse	r24, r1
 61e:	1f ef       	ldi	r17, 0xFF	; 255
 620:	88 81       	ld	r24, Y
 622:	80 76       	andi	r24, 0x60	; 96
 624:	69 f5       	brne	.+90     	; 0x680 <usb_poll+0x98>
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	81 11       	cpse	r24, r1
 62a:	04 c0       	rjmp	.+8      	; 0x634 <usb_poll+0x4c>
 62c:	18 82       	st	Y, r1
 62e:	19 82       	std	Y+1, r1	; 0x01
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	3b c0       	rjmp	.+118    	; 0x6aa <usb_poll+0xc2>
 634:	85 30       	cpi	r24, 0x05	; 5
 636:	29 f4       	brne	.+10     	; 0x642 <usb_poll+0x5a>
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <usb_new_address>
 63e:	95 9a       	sbi	0x12, 5	; 18
 640:	33 c0       	rjmp	.+102    	; 0x6a8 <usb_poll+0xc0>
 642:	86 30       	cpi	r24, 0x06	; 6
 644:	99 f4       	brne	.+38     	; 0x66c <usb_poll+0x84>
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <usb_tx_state>
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	f9 f0       	breq	.+62     	; 0x690 <usb_poll+0xa8>
 652:	82 30       	cpi	r24, 0x02	; 2
 654:	09 f1       	breq	.+66     	; 0x698 <usb_poll+0xb0>
 656:	83 30       	cpi	r24, 0x03	; 3
 658:	39 f5       	brne	.+78     	; 0x6a8 <usb_poll+0xc0>
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	88 23       	and	r24, r24
 65e:	01 f1       	breq	.+64     	; 0x6a0 <usb_poll+0xb8>
 660:	82 30       	cpi	r24, 0x02	; 2
 662:	11 f5       	brne	.+68     	; 0x6a8 <usb_poll+0xc0>
 664:	86 e1       	ldi	r24, 0x16	; 22
 666:	ce e5       	ldi	r28, 0x5E	; 94
 668:	d0 e0       	ldi	r29, 0x00	; 0
 66a:	1f c0       	rjmp	.+62     	; 0x6aa <usb_poll+0xc2>
 66c:	88 30       	cpi	r24, 0x08	; 8
 66e:	19 f4       	brne	.+6      	; 0x676 <usb_poll+0x8e>
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	88 83       	st	Y, r24
 674:	1a c0       	rjmp	.+52     	; 0x6aa <usb_poll+0xc2>
 676:	8a 30       	cpi	r24, 0x0A	; 10
 678:	b9 f4       	brne	.+46     	; 0x6a8 <usb_poll+0xc0>
 67a:	18 82       	st	Y, r1
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	15 c0       	rjmp	.+42     	; 0x6aa <usb_poll+0xc2>
 680:	ce 01       	movw	r24, r28
 682:	e0 de       	rcall	.-576    	; 0x444 <usb_setup>
 684:	8f 3f       	cpi	r24, 0xFF	; 255
 686:	89 f4       	brne	.+34     	; 0x6aa <usb_poll+0xc2>
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <usb_tx_state>
 68e:	0f c0       	rjmp	.+30     	; 0x6ae <usb_poll+0xc6>
 690:	82 e1       	ldi	r24, 0x12	; 18
 692:	c8 e4       	ldi	r28, 0x48	; 72
 694:	d0 e0       	ldi	r29, 0x00	; 0
 696:	09 c0       	rjmp	.+18     	; 0x6aa <usb_poll+0xc2>
 698:	82 e1       	ldi	r24, 0x12	; 18
 69a:	c6 e3       	ldi	r28, 0x36	; 54
 69c:	d0 e0       	ldi	r29, 0x00	; 0
 69e:	05 c0       	rjmp	.+10     	; 0x6aa <usb_poll+0xc2>
 6a0:	84 e0       	ldi	r24, 0x04	; 4
 6a2:	ca e5       	ldi	r28, 0x5A	; 90
 6a4:	d0 e0       	ldi	r29, 0x00	; 0
 6a6:	01 c0       	rjmp	.+2      	; 0x6aa <usb_poll+0xc2>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	81 17       	cp	r24, r17
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <usb_poll+0xc8>
 6ae:	81 2f       	mov	r24, r17
 6b0:	d0 93 74 00 	sts	0x0074, r29	; 0x800074 <usb_tx_data+0x1>
 6b4:	c0 93 73 00 	sts	0x0073, r28	; 0x800073 <usb_tx_data>
 6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <usb_poll+0xdc>
 6ba:	63 50       	subi	r22, 0x03	; 3
 6bc:	11 f0       	breq	.+4      	; 0x6c2 <usb_poll+0xda>
 6be:	ce 01       	movw	r24, r28
 6c0:	39 df       	rcall	.-398    	; 0x534 <usb_out>
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <usb_tx_total>
 6c8:	83 ec       	ldi	r24, 0xC3	; 195
 6ca:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <usb_tx_buf>
 6ce:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <usb_tx_len>
 6d2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <usb_rx_len>
 6d6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <usb_tx_len>
 6da:	81 11       	cpse	r24, r1
 6dc:	53 c0       	rjmp	.+166    	; 0x784 <usb_poll+0x19c>
 6de:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <usb_tx_state>
 6e2:	99 23       	and	r25, r25
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <usb_poll+0x100>
 6e6:	4e c0       	rjmp	.+156    	; 0x784 <usb_poll+0x19c>
 6e8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <usb_tx_buf>
 6ec:	88 e8       	ldi	r24, 0x88	; 136
 6ee:	82 27       	eor	r24, r18
 6f0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <usb_tx_buf>
 6f4:	c0 91 75 00 	lds	r28, 0x0075	; 0x800075 <usb_tx_total>
 6f8:	c9 30       	cpi	r28, 0x09	; 9
 6fa:	18 f4       	brcc	.+6      	; 0x702 <usb_poll+0x11a>
 6fc:	cc 23       	and	r28, r28
 6fe:	b1 f1       	breq	.+108    	; 0x76c <usb_poll+0x184>
 700:	01 c0       	rjmp	.+2      	; 0x704 <usb_poll+0x11c>
 702:	c8 e0       	ldi	r28, 0x08	; 8
 704:	93 30       	cpi	r25, 0x03	; 3
 706:	31 f4       	brne	.+12     	; 0x714 <usb_poll+0x12c>
 708:	6c 2f       	mov	r22, r28
 70a:	89 e7       	ldi	r24, 0x79	; 121
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	f9 de       	rcall	.-526    	; 0x502 <usb_in>
 710:	c8 2f       	mov	r28, r24
 712:	27 c0       	rjmp	.+78     	; 0x762 <usb_poll+0x17a>
 714:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <usb_tx_data>
 718:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <usb_tx_data+0x1>
 71c:	91 30       	cpi	r25, 0x01	; 1
 71e:	91 f4       	brne	.+36     	; 0x744 <usb_poll+0x15c>
 720:	49 e7       	ldi	r20, 0x79	; 121
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	e8 2f       	mov	r30, r24
 726:	f2 2f       	mov	r31, r18
 728:	31 96       	adiw	r30, 0x01	; 1
 72a:	9f 01       	movw	r18, r30
 72c:	21 50       	subi	r18, 0x01	; 1
 72e:	31 09       	sbc	r19, r1
 730:	d9 01       	movw	r26, r18
 732:	9c 91       	ld	r25, X
 734:	da 01       	movw	r26, r20
 736:	9d 93       	st	X+, r25
 738:	ad 01       	movw	r20, r26
 73a:	9e 2f       	mov	r25, r30
 73c:	98 1b       	sub	r25, r24
 73e:	9c 17       	cp	r25, r28
 740:	98 f3       	brcs	.-26     	; 0x728 <usb_poll+0x140>
 742:	0b c0       	rjmp	.+22     	; 0x75a <usb_poll+0x172>
 744:	a9 e7       	ldi	r26, 0x79	; 121
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	e8 2f       	mov	r30, r24
 74a:	f2 2f       	mov	r31, r18
 74c:	94 91       	lpm	r25, Z
 74e:	31 96       	adiw	r30, 0x01	; 1
 750:	9d 93       	st	X+, r25
 752:	9e 2f       	mov	r25, r30
 754:	98 1b       	sub	r25, r24
 756:	9c 17       	cp	r25, r28
 758:	c8 f3       	brcs	.-14     	; 0x74c <usb_poll+0x164>
 75a:	f0 93 74 00 	sts	0x0074, r31	; 0x800074 <usb_tx_data+0x1>
 75e:	e0 93 73 00 	sts	0x0073, r30	; 0x800073 <usb_tx_data>
 762:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <usb_tx_total>
 766:	8c 1b       	sub	r24, r28
 768:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <usb_tx_total>
 76c:	6c 2f       	mov	r22, r28
 76e:	89 e7       	ldi	r24, 0x79	; 121
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	9a dc       	rcall	.-1740   	; 0xa8 <crc>
 774:	83 e0       	ldi	r24, 0x03	; 3
 776:	8c 0f       	add	r24, r28
 778:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <usb_tx_len>
 77c:	c8 30       	cpi	r28, 0x08	; 8
 77e:	10 f4       	brcc	.+4      	; 0x784 <usb_poll+0x19c>
 780:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <usb_tx_state>
 784:	8a e0       	ldi	r24, 0x0A	; 10
 786:	83 99       	sbic	0x10, 3	; 16
 788:	07 c0       	rjmp	.+14     	; 0x798 <usb_poll+0x1b0>
 78a:	81 50       	subi	r24, 0x01	; 1
 78c:	e1 f7       	brne	.-8      	; 0x786 <usb_poll+0x19e>
 78e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <usb_new_address>
 792:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <usb_address>
 796:	95 98       	cbi	0x12, 5	; 18
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	08 95       	ret

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
