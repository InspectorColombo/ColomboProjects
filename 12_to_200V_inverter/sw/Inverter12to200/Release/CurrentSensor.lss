
CurrentSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_info   00000420  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e8  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f2  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000169  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	71 d0       	rcall	.+226    	; 0x11e <main>
  3c:	82 c0       	rjmp	.+260    	; 0x142 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <DelayMicroSec>:
  40:	88 23       	and	r24, r24
  42:	39 f0       	breq	.+14     	; 0x52 <DelayMicroSec+0x12>
	...
  4c:	00 00       	nop
  4e:	81 50       	subi	r24, 0x01	; 1
  50:	f7 cf       	rjmp	.-18     	; 0x40 <DelayMicroSec>
  52:	08 95       	ret

00000054 <DelayMiliSec>:
  54:	cf 93       	push	r28
  56:	df 93       	push	r29
  58:	ec 01       	movw	r28, r24
  5a:	20 97       	sbiw	r28, 0x00	; 0
  5c:	51 f0       	breq	.+20     	; 0x72 <DelayMiliSec+0x1e>
  5e:	8a ef       	ldi	r24, 0xFA	; 250
  60:	ef df       	rcall	.-34     	; 0x40 <DelayMicroSec>
  62:	8a ef       	ldi	r24, 0xFA	; 250
  64:	ed df       	rcall	.-38     	; 0x40 <DelayMicroSec>
  66:	8a ef       	ldi	r24, 0xFA	; 250
  68:	eb df       	rcall	.-42     	; 0x40 <DelayMicroSec>
  6a:	8a ef       	ldi	r24, 0xFA	; 250
  6c:	e9 df       	rcall	.-46     	; 0x40 <DelayMicroSec>
  6e:	21 97       	sbiw	r28, 0x01	; 1
  70:	f4 cf       	rjmp	.-24     	; 0x5a <DelayMiliSec+0x6>
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	08 95       	ret

00000078 <BuzzerOn>:
  78:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  7c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  80:	80 62       	ori	r24, 0x20	; 32
  82:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  8a:	08 95       	ret

0000008c <BuzzerOff>:
  8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  90:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  94:	8f 7d       	andi	r24, 0xDF	; 223
  96:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  9e:	08 95       	ret

000000a0 <ConverterOn>:
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	08 95       	ret

000000b4 <ConverterOff>:
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	08 95       	ret

000000c8 <SendShiftRegisterWord>:
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	d8 2f       	mov	r29, r24
  ce:	c9 2f       	mov	r28, r25
  d0:	c1 98       	cbi	0x18, 1	; 24
  d2:	8c e3       	ldi	r24, 0x3C	; 60
  d4:	b5 df       	rcall	.-150    	; 0x40 <DelayMicroSec>
  d6:	8d 2f       	mov	r24, r29
  d8:	9c 2f       	mov	r25, r28
  da:	20 e1       	ldi	r18, 0x10	; 16
  dc:	97 ff       	sbrs	r25, 7
  de:	02 c0       	rjmp	.+4      	; 0xe4 <SendShiftRegisterWord+0x1c>
  e0:	c0 9a       	sbi	0x18, 0	; 24
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SendShiftRegisterWord+0x1e>
  e4:	c0 98       	cbi	0x18, 0	; 24
  e6:	c1 9a       	sbi	0x18, 1	; 24
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	21 f0       	breq	.+8      	; 0xf4 <SendShiftRegisterWord+0x2c>
  ec:	c1 98       	cbi	0x18, 1	; 24
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	f4 cf       	rjmp	.-24     	; 0xdc <SendShiftRegisterWord+0x14>
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <ShiftRegInit>:
  fa:	c1 98       	cbi	0x18, 1	; 24
  fc:	c0 98       	cbi	0x18, 0	; 24
  fe:	87 b3       	in	r24, 0x17	; 23
 100:	83 60       	ori	r24, 0x03	; 3
 102:	87 bb       	out	0x17, r24	; 23
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	df cf       	rjmp	.-66     	; 0xc8 <SendShiftRegisterWord>

0000010a <ShiftRegPush>:
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 112:	9f 6f       	ori	r25, 0xFF	; 255
 114:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 11c:	d5 cf       	rjmp	.-86     	; 0xc8 <SendShiftRegisterWord>

0000011e <main>:
 11e:	ed df       	rcall	.-38     	; 0xfa <ShiftRegInit>
 120:	ab df       	rcall	.-170    	; 0x78 <BuzzerOn>
 122:	be df       	rcall	.-132    	; 0xa0 <ConverterOn>
 124:	f2 df       	rcall	.-28     	; 0x10a <ShiftRegPush>
 126:	84 ef       	ldi	r24, 0xF4	; 244
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	94 df       	rcall	.-216    	; 0x54 <DelayMiliSec>
 12c:	af df       	rcall	.-162    	; 0x8c <BuzzerOff>
 12e:	ed df       	rcall	.-38     	; 0x10a <ShiftRegPush>
 130:	8c ed       	ldi	r24, 0xDC	; 220
 132:	95 e0       	ldi	r25, 0x05	; 5
 134:	8f df       	rcall	.-226    	; 0x54 <DelayMiliSec>
 136:	be df       	rcall	.-132    	; 0xb4 <ConverterOff>
 138:	e8 df       	rcall	.-48     	; 0x10a <ShiftRegPush>
 13a:	80 ed       	ldi	r24, 0xD0	; 208
 13c:	97 e0       	ldi	r25, 0x07	; 7
 13e:	8a df       	rcall	.-236    	; 0x54 <DelayMiliSec>
 140:	ef cf       	rjmp	.-34     	; 0x120 <main+0x2>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
