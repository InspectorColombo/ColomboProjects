
CurrentSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000488  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  0000052a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_info   00000420  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e8  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f2  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000169  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e8       	ldi	r30, 0x88	; 136
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ae 36       	cpi	r26, 0x6E	; 110
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	ae e6       	ldi	r26, 0x6E	; 110
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 37       	cpi	r26, 0x71	; 113
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	bd d1       	rcall	.+890    	; 0x3cc <main>
  52:	18 c2       	rjmp	.+1072   	; 0x484 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <DelayMicroSec>:
  56:	88 23       	and	r24, r24
  58:	39 f0       	breq	.+14     	; 0x68 <DelayMicroSec+0x12>
	...
  62:	00 00       	nop
  64:	81 50       	subi	r24, 0x01	; 1
  66:	f7 cf       	rjmp	.-18     	; 0x56 <DelayMicroSec>
  68:	08 95       	ret

0000006a <DelayMiliSec>:
  6a:	cf 93       	push	r28
  6c:	df 93       	push	r29
  6e:	ec 01       	movw	r28, r24
  70:	20 97       	sbiw	r28, 0x00	; 0
  72:	51 f0       	breq	.+20     	; 0x88 <DelayMiliSec+0x1e>
  74:	8a ef       	ldi	r24, 0xFA	; 250
  76:	ef df       	rcall	.-34     	; 0x56 <DelayMicroSec>
  78:	8a ef       	ldi	r24, 0xFA	; 250
  7a:	ed df       	rcall	.-38     	; 0x56 <DelayMicroSec>
  7c:	8a ef       	ldi	r24, 0xFA	; 250
  7e:	eb df       	rcall	.-42     	; 0x56 <DelayMicroSec>
  80:	8a ef       	ldi	r24, 0xFA	; 250
  82:	e9 df       	rcall	.-46     	; 0x56 <DelayMicroSec>
  84:	21 97       	sbiw	r28, 0x01	; 1
  86:	f4 cf       	rjmp	.-24     	; 0x70 <DelayMiliSec+0x6>
  88:	df 91       	pop	r29
  8a:	cf 91       	pop	r28
  8c:	08 95       	ret

0000008e <InitCurrentSensorADC>:
  8e:	bc 98       	cbi	0x17, 4	; 23
  90:	c4 98       	cbi	0x18, 4	; 24
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	87 b9       	out	0x07, r24	; 7
  96:	86 e9       	ldi	r24, 0x96	; 150
  98:	86 b9       	out	0x06, r24	; 6
  9a:	83 b1       	in	r24, 0x03	; 3
  9c:	80 74       	andi	r24, 0x40	; 64
  9e:	83 b9       	out	0x03, r24	; 3
  a0:	a4 9a       	sbi	0x14, 4	; 20
  a2:	08 95       	ret

000000a4 <StartAdcConversion>:
  a4:	34 9a       	sbi	0x06, 4	; 6
  a6:	36 9a       	sbi	0x06, 6	; 6
  a8:	34 9b       	sbis	0x06, 4	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <StartAdcConversion+0x4>
  ac:	34 9a       	sbi	0x06, 4	; 6
  ae:	24 b1       	in	r18, 0x04	; 4
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	98 2f       	mov	r25, r24
  b6:	88 27       	eor	r24, r24
  b8:	82 0f       	add	r24, r18
  ba:	91 1d       	adc	r25, r1
  bc:	08 95       	ret

000000be <GetCurrentAdcInMa>:
  be:	cf 92       	push	r12
  c0:	df 92       	push	r13
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
  d0:	c2 3f       	cpi	r28, 0xF2	; 242
  d2:	88 e3       	ldi	r24, 0x38	; 56
  d4:	d8 07       	cpc	r29, r24
  d6:	10 f0       	brcs	.+4      	; 0xdc <GetCurrentAdcInMa+0x1e>
  d8:	c1 ef       	ldi	r28, 0xF1	; 241
  da:	d8 e3       	ldi	r29, 0x38	; 56
  dc:	d8 df       	rcall	.-80     	; 0x8e <InitCurrentSensorADC>
  de:	e2 df       	rcall	.-60     	; 0xa4 <StartAdcConversion>
  e0:	00 e0       	ldi	r16, 0x00	; 0
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	c1 2c       	mov	r12, r1
  e6:	d1 2c       	mov	r13, r1
  e8:	76 01       	movw	r14, r12
  ea:	0c 17       	cp	r16, r28
  ec:	1d 07       	cpc	r17, r29
  ee:	41 f0       	breq	.+16     	; 0x100 <__DATA_REGION_LENGTH__>
  f0:	d9 df       	rcall	.-78     	; 0xa4 <StartAdcConversion>
  f2:	c8 0e       	add	r12, r24
  f4:	d9 1e       	adc	r13, r25
  f6:	e1 1c       	adc	r14, r1
  f8:	f1 1c       	adc	r15, r1
  fa:	0f 5f       	subi	r16, 0xFF	; 255
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
  fe:	f5 cf       	rjmp	.-22     	; 0xea <GetCurrentAdcInMa+0x2c>
 100:	20 e2       	ldi	r18, 0x20	; 32
 102:	31 e0       	ldi	r19, 0x01	; 1
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	c7 01       	movw	r24, r14
 10a:	b6 01       	movw	r22, r12
 10c:	80 d1       	rcall	.+768    	; 0x40e <__mulsi3>
 10e:	2d e7       	ldi	r18, 0x7D	; 125
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	94 d1       	rcall	.+808    	; 0x440 <__udivmodsi4>
 118:	ca 01       	movw	r24, r20
 11a:	b9 01       	movw	r22, r18
 11c:	98 01       	movw	r18, r16
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	8e d1       	rcall	.+796    	; 0x440 <__udivmodsi4>
 124:	c9 01       	movw	r24, r18
 126:	08 96       	adiw	r24, 0x08	; 8
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	ff 90       	pop	r15
 132:	ef 90       	pop	r14
 134:	df 90       	pop	r13
 136:	cf 90       	pop	r12
 138:	08 95       	ret

0000013a <SwUartOneBitDelay>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	10 91 6e 00 	lds	r17, 0x006E	; 0x80006e <__data_end>
 142:	00 00       	nop
 144:	00 00       	nop
 146:	09 e0       	ldi	r16, 0x09	; 9

00000148 <SW_UART_DELAY_L1>:
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	0a 95       	dec	r16
 14e:	e1 f7       	brne	.-8      	; 0x148 <SW_UART_DELAY_L1>
 150:	0c e0       	ldi	r16, 0x0C	; 12
 152:	0f 93       	push	r16
 154:	0f 91       	pop	r16
 156:	1a 95       	dec	r17
 158:	b9 f7       	brne	.-18     	; 0x148 <SW_UART_DELAY_L1>
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <SetOsccal>:
 160:	91 b7       	in	r25, 0x31	; 49
 162:	98 17       	cp	r25, r24
 164:	91 f0       	breq	.+36     	; 0x18a <SetOsccal+0x2a>
 166:	98 17       	cp	r25, r24
 168:	10 f4       	brcc	.+4      	; 0x16e <SetOsccal+0xe>
 16a:	9f 5f       	subi	r25, 0xFF	; 255
 16c:	01 c0       	rjmp	.+2      	; 0x170 <SetOsccal+0x10>
 16e:	91 50       	subi	r25, 0x01	; 1
 170:	91 bf       	out	0x31, r25	; 49
 172:	9f ef       	ldi	r25, 0xFF	; 255
	...
 184:	91 50       	subi	r25, 0x01	; 1
 186:	b1 f7       	brne	.-20     	; 0x174 <SetOsccal+0x14>
 188:	eb cf       	rjmp	.-42     	; 0x160 <SetOsccal>
 18a:	08 95       	ret

0000018c <SwUartInit>:
 18c:	cf 93       	push	r28
 18e:	c8 2f       	mov	r28, r24
 190:	83 ea       	ldi	r24, 0xA3	; 163
 192:	e6 df       	rcall	.-52     	; 0x160 <SetOsccal>
 194:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__data_end>
 198:	c0 9a       	sbi	0x18, 0	; 24
 19a:	b8 9a       	sbi	0x17, 0	; 23
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <SwUartSendByte>:
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	c8 2f       	mov	r28, r24
 1a6:	c0 98       	cbi	0x18, 0	; 24
 1a8:	c8 df       	rcall	.-112    	; 0x13a <SwUartOneBitDelay>
 1aa:	d8 e0       	ldi	r29, 0x08	; 8
 1ac:	c0 ff       	sbrs	r28, 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <SwUartSendByte+0x14>
 1b0:	c0 9a       	sbi	0x18, 0	; 24
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <SwUartSendByte+0x16>
 1b4:	c0 98       	cbi	0x18, 0	; 24
 1b6:	c1 df       	rcall	.-126    	; 0x13a <SwUartOneBitDelay>
 1b8:	c6 95       	lsr	r28
 1ba:	d1 50       	subi	r29, 0x01	; 1
 1bc:	b9 f7       	brne	.-18     	; 0x1ac <SwUartSendByte+0xc>
 1be:	c0 9a       	sbi	0x18, 0	; 24
 1c0:	bc df       	rcall	.-136    	; 0x13a <SwUartOneBitDelay>
 1c2:	bb df       	rcall	.-138    	; 0x13a <SwUartOneBitDelay>
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <SwUartPrintString>:
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
 1d0:	89 91       	ld	r24, Y+
 1d2:	88 23       	and	r24, r24
 1d4:	11 f0       	breq	.+4      	; 0x1da <SwUartPrintString+0x10>
 1d6:	e4 df       	rcall	.-56     	; 0x1a0 <SwUartSendByte>
 1d8:	fb cf       	rjmp	.-10     	; 0x1d0 <SwUartPrintString+0x6>
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <SwUartPrintLong>:
 1e0:	8f 92       	push	r8
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	2a 97       	sbiw	r28, 0x0a	; 10
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	19 e0       	ldi	r17, 0x09	; 9
 202:	2a e0       	ldi	r18, 0x0A	; 10
 204:	82 2e       	mov	r8, r18
 206:	91 2c       	mov	r9, r1
 208:	a1 2c       	mov	r10, r1
 20a:	b1 2c       	mov	r11, r1
 20c:	61 15       	cp	r22, r1
 20e:	71 05       	cpc	r23, r1
 210:	81 05       	cpc	r24, r1
 212:	91 05       	cpc	r25, r1
 214:	81 f0       	breq	.+32     	; 0x236 <SwUartPrintLong+0x56>
 216:	a5 01       	movw	r20, r10
 218:	94 01       	movw	r18, r8
 21a:	12 d1       	rcall	.+548    	; 0x440 <__udivmodsi4>
 21c:	a6 2f       	mov	r26, r22
 21e:	b9 01       	movw	r22, r18
 220:	ca 01       	movw	r24, r20
 222:	19 30       	cpi	r17, 0x09	; 9
 224:	59 f0       	breq	.+22     	; 0x23c <SwUartPrintLong+0x5c>
 226:	a1 11       	cpse	r26, r1
 228:	09 c0       	rjmp	.+18     	; 0x23c <SwUartPrintLong+0x5c>
 22a:	61 15       	cp	r22, r1
 22c:	71 05       	cpc	r23, r1
 22e:	81 05       	cpc	r24, r1
 230:	91 05       	cpc	r25, r1
 232:	21 f4       	brne	.+8      	; 0x23c <SwUartPrintLong+0x5c>
 234:	04 c0       	rjmp	.+8      	; 0x23e <SwUartPrintLong+0x5e>
 236:	a0 e0       	ldi	r26, 0x00	; 0
 238:	19 30       	cpi	r17, 0x09	; 9
 23a:	09 f4       	brne	.+2      	; 0x23e <SwUartPrintLong+0x5e>
 23c:	a0 5d       	subi	r26, 0xD0	; 208
 23e:	e1 e0       	ldi	r30, 0x01	; 1
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ec 0f       	add	r30, r28
 244:	fd 1f       	adc	r31, r29
 246:	e1 0f       	add	r30, r17
 248:	f1 1d       	adc	r31, r1
 24a:	a0 83       	st	Z, r26
 24c:	11 23       	and	r17, r17
 24e:	11 f0       	breq	.+4      	; 0x254 <SwUartPrintLong+0x74>
 250:	11 50       	subi	r17, 0x01	; 1
 252:	dc cf       	rjmp	.-72     	; 0x20c <SwUartPrintLong+0x2c>
 254:	8e 01       	movw	r16, r28
 256:	0f 5f       	subi	r16, 0xFF	; 255
 258:	1f 4f       	sbci	r17, 0xFF	; 255
 25a:	5e 01       	movw	r10, r28
 25c:	8b e0       	ldi	r24, 0x0B	; 11
 25e:	a8 0e       	add	r10, r24
 260:	b1 1c       	adc	r11, r1
 262:	f8 01       	movw	r30, r16
 264:	81 91       	ld	r24, Z+
 266:	8f 01       	movw	r16, r30
 268:	81 11       	cpse	r24, r1
 26a:	9a df       	rcall	.-204    	; 0x1a0 <SwUartSendByte>
 26c:	a0 16       	cp	r10, r16
 26e:	b1 06       	cpc	r11, r17
 270:	c1 f7       	brne	.-16     	; 0x262 <SwUartPrintLong+0x82>
 272:	2a 96       	adiw	r28, 0x0a	; 10
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	bf 90       	pop	r11
 288:	af 90       	pop	r10
 28a:	9f 90       	pop	r9
 28c:	8f 90       	pop	r8
 28e:	08 95       	ret

00000290 <BuzzerOff>:
 290:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 294:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 298:	8f 7d       	andi	r24, 0xDF	; 223
 29a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 29e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 2a2:	08 95       	ret

000002a4 <AddChargeVoltageOff>:
 2a4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 2a8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 2ac:	87 7f       	andi	r24, 0xF7	; 247
 2ae:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 2b2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 2b6:	08 95       	ret

000002b8 <ConverterOff>:
 2b8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 2bc:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 2c0:	8f 7b       	andi	r24, 0xBF	; 191
 2c2:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 2c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 2ca:	08 95       	ret

000002cc <SenseBatteryVoltageOff>:
 2cc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 2d0:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 2d4:	8f 77       	andi	r24, 0x7F	; 127
 2d6:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 2da:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 2de:	08 95       	ret

000002e0 <LedVoltGreen2Off>:
 2e0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 2e4:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 2e8:	9e 7f       	andi	r25, 0xFE	; 254
 2ea:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 2ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 2f2:	08 95       	ret

000002f4 <LedVoltGreen1Off>:
 2f4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 2f8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 2fc:	9b 7f       	andi	r25, 0xFB	; 251
 2fe:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 302:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 306:	08 95       	ret

00000308 <LedVoltYellowOff>:
 308:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 30c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 310:	9f 7e       	andi	r25, 0xEF	; 239
 312:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 316:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 31a:	08 95       	ret

0000031c <LedVoltRedOff>:
 31c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 320:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 324:	9f 7b       	andi	r25, 0xBF	; 191
 326:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 32a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 32e:	08 95       	ret

00000330 <LedCurrGreen2Off>:
 330:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 334:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 338:	9f 77       	andi	r25, 0x7F	; 127
 33a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 33e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 342:	08 95       	ret

00000344 <LedCurrGreen1Off>:
 344:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 348:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 34c:	9f 7d       	andi	r25, 0xDF	; 223
 34e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 352:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 356:	08 95       	ret

00000358 <LedCurrYellowOff>:
 358:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 35c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 360:	97 7f       	andi	r25, 0xF7	; 247
 362:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 366:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 36a:	08 95       	ret

0000036c <LedCurrRedOff>:
 36c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 370:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 374:	9d 7f       	andi	r25, 0xFD	; 253
 376:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_shiftRegCodeWord+0x1>
 37a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_shiftRegCodeWord>
 37e:	08 95       	ret

00000380 <SendShiftRegisterWord>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	d8 2f       	mov	r29, r24
 386:	c9 2f       	mov	r28, r25
 388:	c1 98       	cbi	0x18, 1	; 24
 38a:	8c e3       	ldi	r24, 0x3C	; 60
 38c:	64 de       	rcall	.-824    	; 0x56 <DelayMicroSec>
 38e:	8d 2f       	mov	r24, r29
 390:	9c 2f       	mov	r25, r28
 392:	20 e1       	ldi	r18, 0x10	; 16
 394:	97 ff       	sbrs	r25, 7
 396:	02 c0       	rjmp	.+4      	; 0x39c <SendShiftRegisterWord+0x1c>
 398:	c0 9a       	sbi	0x18, 0	; 24
 39a:	01 c0       	rjmp	.+2      	; 0x39e <SendShiftRegisterWord+0x1e>
 39c:	c0 98       	cbi	0x18, 0	; 24
 39e:	c1 9a       	sbi	0x18, 1	; 24
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	21 f0       	breq	.+8      	; 0x3ac <SendShiftRegisterWord+0x2c>
 3a4:	c1 98       	cbi	0x18, 1	; 24
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	f4 cf       	rjmp	.-24     	; 0x394 <SendShiftRegisterWord+0x14>
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <ShiftRegInit>:
 3b2:	c1 98       	cbi	0x18, 1	; 24
 3b4:	c0 98       	cbi	0x18, 0	; 24
 3b6:	87 b3       	in	r24, 0x17	; 23
 3b8:	83 60       	ori	r24, 0x03	; 3
 3ba:	87 bb       	out	0x17, r24	; 23
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	df cf       	rjmp	.-66     	; 0x380 <SendShiftRegisterWord>

000003c2 <ShiftRegPush>:
 3c2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_shiftRegCodeWord>
 3c6:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_shiftRegCodeWord+0x1>
 3ca:	da cf       	rjmp	.-76     	; 0x380 <SendShiftRegisterWord>

000003cc <main>:
 3cc:	f2 df       	rcall	.-28     	; 0x3b2 <ShiftRegInit>
 3ce:	ce df       	rcall	.-100    	; 0x36c <LedCurrRedOff>
 3d0:	c3 df       	rcall	.-122    	; 0x358 <LedCurrYellowOff>
 3d2:	b8 df       	rcall	.-144    	; 0x344 <LedCurrGreen1Off>
 3d4:	ad df       	rcall	.-166    	; 0x330 <LedCurrGreen2Off>
 3d6:	a2 df       	rcall	.-188    	; 0x31c <LedVoltRedOff>
 3d8:	97 df       	rcall	.-210    	; 0x308 <LedVoltYellowOff>
 3da:	8c df       	rcall	.-232    	; 0x2f4 <LedVoltGreen1Off>
 3dc:	81 df       	rcall	.-254    	; 0x2e0 <LedVoltGreen2Off>
 3de:	58 df       	rcall	.-336    	; 0x290 <BuzzerOff>
 3e0:	61 df       	rcall	.-318    	; 0x2a4 <AddChargeVoltageOff>
 3e2:	6a df       	rcall	.-300    	; 0x2b8 <ConverterOff>
 3e4:	73 df       	rcall	.-282    	; 0x2cc <SenseBatteryVoltageOff>
 3e6:	ed df       	rcall	.-38     	; 0x3c2 <ShiftRegPush>
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	d0 de       	rcall	.-608    	; 0x18c <SwUartInit>
 3ec:	80 e6       	ldi	r24, 0x60	; 96
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	ec de       	rcall	.-552    	; 0x1ca <SwUartPrintString>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	63 de       	rcall	.-826    	; 0xbe <GetCurrentAdcInMa>
 3f8:	bc 01       	movw	r22, r24
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	f0 de       	rcall	.-544    	; 0x1e0 <SwUartPrintLong>
 400:	8a e6       	ldi	r24, 0x6A	; 106
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	e2 de       	rcall	.-572    	; 0x1ca <SwUartPrintString>
 406:	84 ef       	ldi	r24, 0xF4	; 244
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	2f de       	rcall	.-930    	; 0x6a <DelayMiliSec>
 40c:	ef cf       	rjmp	.-34     	; 0x3ec <main+0x20>

0000040e <__mulsi3>:
 40e:	ee 27       	eor	r30, r30
 410:	ff 27       	eor	r31, r31

00000412 <__mulsi3_helper>:
 412:	aa 27       	eor	r26, r26
 414:	bb 27       	eor	r27, r27
 416:	08 c0       	rjmp	.+16     	; 0x428 <__mulsi3_helper+0x16>
 418:	a2 0f       	add	r26, r18
 41a:	b3 1f       	adc	r27, r19
 41c:	e4 1f       	adc	r30, r20
 41e:	f5 1f       	adc	r31, r21
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	44 1f       	adc	r20, r20
 426:	55 1f       	adc	r21, r21
 428:	96 95       	lsr	r25
 42a:	87 95       	ror	r24
 42c:	77 95       	ror	r23
 42e:	67 95       	ror	r22
 430:	98 f3       	brcs	.-26     	; 0x418 <__mulsi3_helper+0x6>
 432:	70 40       	sbci	r23, 0x00	; 0
 434:	a9 f7       	brne	.-22     	; 0x420 <__mulsi3_helper+0xe>
 436:	00 97       	sbiw	r24, 0x00	; 0
 438:	99 f7       	brne	.-26     	; 0x420 <__mulsi3_helper+0xe>
 43a:	bd 01       	movw	r22, r26
 43c:	cf 01       	movw	r24, r30
 43e:	08 95       	ret

00000440 <__udivmodsi4>:
 440:	a1 e2       	ldi	r26, 0x21	; 33
 442:	1a 2e       	mov	r1, r26
 444:	aa 1b       	sub	r26, r26
 446:	bb 1b       	sub	r27, r27
 448:	fd 01       	movw	r30, r26
 44a:	0d c0       	rjmp	.+26     	; 0x466 <__udivmodsi4_ep>

0000044c <__udivmodsi4_loop>:
 44c:	aa 1f       	adc	r26, r26
 44e:	bb 1f       	adc	r27, r27
 450:	ee 1f       	adc	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	a2 17       	cp	r26, r18
 456:	b3 07       	cpc	r27, r19
 458:	e4 07       	cpc	r30, r20
 45a:	f5 07       	cpc	r31, r21
 45c:	20 f0       	brcs	.+8      	; 0x466 <__udivmodsi4_ep>
 45e:	a2 1b       	sub	r26, r18
 460:	b3 0b       	sbc	r27, r19
 462:	e4 0b       	sbc	r30, r20
 464:	f5 0b       	sbc	r31, r21

00000466 <__udivmodsi4_ep>:
 466:	66 1f       	adc	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	88 1f       	adc	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	1a 94       	dec	r1
 470:	69 f7       	brne	.-38     	; 0x44c <__udivmodsi4_loop>
 472:	60 95       	com	r22
 474:	70 95       	com	r23
 476:	80 95       	com	r24
 478:	90 95       	com	r25
 47a:	9b 01       	movw	r18, r22
 47c:	ac 01       	movw	r20, r24
 47e:	bd 01       	movw	r22, r26
 480:	cf 01       	movw	r24, r30
 482:	08 95       	ret

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>
