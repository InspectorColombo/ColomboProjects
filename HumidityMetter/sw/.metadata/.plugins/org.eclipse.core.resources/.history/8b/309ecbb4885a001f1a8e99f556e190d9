/*
 * AM2320Sensor.hpp
 *
 *  Created on: Aug 15, 2024
 *      Author: Goggy
 */



#ifndef __AM2320SENSOR_HPP__
#define __AM2320SENSOR_HPP__

#include <stdint.h>

#include "stm32f103xb.h"
#include "DelayTimer.hpp"
#include "ErrorLed.hpp"
#include "I2cRxTx.hpp"




class AM2320Sensor
{
public:
	AM2320Sensor()
	{
		I2cRxTx::Init();
	}

	void Read()
	{
		volatile uint8_t bbbb=12;
		for(;;)
		{
			if (bbbb != 12)
				break;

			//DelayTimer::DelayMilliSec(15);
			Acquisition();

			WakeCommand();
			DelayTimer::DelayMilliSec(10);

			if (!ReadCommand())
				continue;

			DelayTimer::DelayMilliSec(15);

			if (!GetReadData())
				continue;
		}




	}


private:
	void WakeCommand() const
	{
		// Wake sensor
		I2cRxTx::StartCondition();
		I2cRxTx::SendByte(0xB8);
		I2cRxTx::GetAcknowlegeBit(true);
		DelayTimer::DelayMicroSec(800);
		I2cRxTx::StopCondition();
	}

	bool ReadCommand() const
	{
		I2cRxTx::StartCondition();
		I2cRxTx::SendByte(0xB8);
		const bool ack0 = I2cRxTx::GetAcknowlegeBit(true);
		if (ack0 == true)
		{
			I2cRxTx::StopCondition();
			return false;
		}

		I2cRxTx::SendByte(0x03);
		const bool ack1 = I2cRxTx::GetAcknowlegeBit(true);
		if (ack1 == true)
		{
			I2cRxTx::StopCondition();
			return false;
		}

		I2cRxTx::SendByte(0x00);
		const bool ack2 = I2cRxTx::GetAcknowlegeBit(true);
		if (ack2 == true)
		{
			I2cRxTx::StopCondition();
			return false;
		}

		I2cRxTx::SendByte(0x04);
		const bool ack3 = I2cRxTx::GetAcknowlegeBit(true);
		if (ack3 == true)
		{
			I2cRxTx::StopCondition();
			return false;
		}

		I2cRxTx::StopCondition();
		return true;
	}

static uint16_t CalcCRC16(uint8_t* ptr, const uint8_t size)
{
	uint16_t crc = 0xFFFF;
	for(uint8_t byteCnt = 0; byteCnt < size; ++byteCnt)
	{
		crc ^= *ptr++;
		for(uint8_t i = 0; i < 8; i++)
		{
			if(crc & 0x01)
			{
				crc>>=1;
				crc^=0xA001;
			}
			else
			{
				crc>>=1;
			}
		}
	}
	return crc;
}




	bool GetReadData(/*uint8_t& resSize, uint8_t* result*/) const
	{
		I2cRxTx::StartCondition();
		I2cRxTx::SendByte(0xB9);
		const bool ack0 = I2cRxTx::GetAcknowlegeBit(true);
		if (ack0 == true)
		{
			I2cRxTx::StopCondition();
			return false;
		}

//#define RX_SIZE		8
		const uint8_t RX_SIZE = 8;
		uint8_t rx[RX_SIZE];	//  = {0,0,0,0,0,0,0,0};
		for(uint8_t i = 0; i < RX_SIZE; ++i)
		{
			rx[i] = 0x00;
		}

		// Clear to default
//		resSize = 0;
///		for(uint8_t i = 0; i < 8; ++i)
//		{
//			*(result + i) = 0x00;
//		}

		uint8_t rxCnt = 0;
		for(/*uint8_t rxCnt = 0*/; rxCnt < RX_SIZE; ++rxCnt)
		{
			rx[rxCnt] = I2cRxTx::RecieveByte();
		    bool ack = false;

		    if (rxCnt != 7)
		    {
		    	ack = I2cRxTx::GetAcknowlegeBit(false);
		    }
		    else
		   	{
		   		ack = I2cRxTx::GetAcknowlegeBit(true);
		   	}

		    if (ack == true && rxCnt != 7)
		    	break;
		}

		I2cRxTx::StopCondition();

			LcdScreen::LcdClear();
			LcdScreen::LcdToPos(0, 0);

/*

 			LcdScreen::LcdPrint("RX=");
			LcdScreen::LcdPrintHex(rxCnt);

			volatile uint8_t bbbb=12;
			if (bbbb==14)
			{
				uint8_t summ = 0;
				for(uint8_t i = 0; i < 8; ++i)
				{
					summ += rx[i];
				}
				if (summ == 123)
					return false;
			}
*/
			if (rxCnt == 8)
			{
				uint16_t crcSlave = rx[7];
				crcSlave = crcSlave << 8;
				crcSlave += rx[6];

				uint16_t crcMaster = CalcCRC16(&rx[0], 6);

				if (crcSlave != crcMaster)
				{
					LcdScreen::LcdClear();
					LcdScreen::LcdToPos(0, 0);
					LcdScreen::LcdPrint("CRC ERR");
					return false;
				}

				uint16_t humiduty = rx[2];
				humiduty = humiduty << 8;
				humiduty += rx[3];

				uint16_t temperature = rx[4];
				temperature = temperature << 8;
				temperature += rx[5];

				LcdScreen::LcdClear();
				LcdScreen::LcdToPos(0, 0);
				LcdScreen::LcdPrint("T=");
				if ((temperature & (1 << 15)) != 0)
				{
					LcdScreen::LcdPrint("-");
				}
				temperature &= ~(1 << 15);
				temperature = temperature % 10000;
				LcdScreen::LcdPrintDigit(temperature / 1000);
				temperature %= 1000;
				LcdScreen::LcdPrintDigit(temperature / 100);
				temperature %= 100;
				LcdScreen::LcdPrintDigit(temperature / 10);
				temperature %= 10;
				LcdScreen::LcdPrint(".");
				LcdScreen::LcdPrintDigit(temperature);
				//LcdScreen::LcdPrint("C");
				LcdScreen::LcdPrintChar(0b11011111);


				LcdScreen::LcdToPos(0, 1);
				LcdScreen::LcdPrint("H=");
				temperature = humiduty % 10000;
				LcdScreen::LcdPrintDigit(humiduty / 1000);
				humiduty %= 1000;
				LcdScreen::LcdPrintDigit(humiduty / 100);
				humiduty %= 100;
				LcdScreen::LcdPrintDigit(humiduty / 10);
				humiduty %= 10;
				LcdScreen::LcdPrint(".");
				LcdScreen::LcdPrintDigit(humiduty);
				LcdScreen::LcdPrint("%");
				return true;
			}




			if (rxCnt == 0)
			{
				LcdScreen::LcdToPos(0, 0);
				LcdScreen::LcdPrint("No answ");
			}
			else
			{
				for(uint8_t i = 0; i < 4 && i < rxCnt; ++i)
			  {
				  LcdScreen::LcdPrintHex(rx[i]);
		  	  }
		  	  LcdScreen::LcdToPos(0, 1);
		      for(uint8_t i = 4; i < 8 && i < rxCnt; ++i)
    		  {
    			  LcdScreen::LcdPrintHex(rx[i]);
    		  }
		  }

		return true;
	}


	void Acquisition() const
	{
		DelayTimer::DelayMilliSec(2000);
	}

};



#endif	// __AM2320SENSOR_HPP__
