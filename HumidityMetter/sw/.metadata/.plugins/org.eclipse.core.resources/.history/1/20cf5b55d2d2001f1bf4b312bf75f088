/*
 * LCD_SSD1306.cpp
 *
 *  Created on: Jan 14, 2025
 *      Author: Goggy
 */

#include "SSD1306.hpp"

#include "stm32f103xb.h"

#include "LcdScreen.hpp"

namespace LcdDrivers
{
namespace SSD1306
{
// Read/Write bits definition
#define WRITE 0x00
#define READ 0x01

// Command/Data bits definition
#define CONT		0b00000000		// continuation
#define NON_CONT	0b10000000		// non continuation
#define COMMAND		0b00000000		// COMMAND follow
#define DATA		0b01000000		// DATA follow

// COMMANDS
const uint8_t CHARGE_PUMP_ON[5]		= { 4, WRITE, COMMAND | CONT, 0x8D, 0b00010100	};
const uint8_t CHARGE_PUMP_OFF[5]	= { 4, WRITE, COMMAND | CONT, 0x8D, 0b00010000	};

const uint8_t DISPLAY_ON[4]			= { 3, WRITE, COMMAND | NON_CONT, 0xAF }; // (normal mode)
const uint8_t DISPLAY_OFF[4]		= { 3, WRITE, COMMAND | NON_CONT, 0xAE }; // (sleep mode)

const uint8_t ENTIRE_DISPLAY_ON[4]	= { 3, WRITE, COMMAND | NON_CONT, 0xA4 }; // Entire display ON
const uint8_t ENTIRE_DISPLAY_OFF[4]	= { 3, WRITE, COMMAND | NON_CONT, 0xA5 }; // Entire display OFF

const uint8_t SET_NORMAL_DISPLAY[4]	= { 3, WRITE, COMMAND | NON_CONT, 0xA6 }; // Set normal display
const uint8_t SET_INVERSE_DISPLAY[4]= { 3, WRITE, COMMAND | NON_CONT, 0xA7 }; // Set inverse display

const uint8_t SET_MEMORY_ADDRESSING_MODE_HORIZONTAL[4]=	{ 3, WRITE, COMMAND | NON_CONT, 0b00000000}; // Horizontal memory addressing mode
const uint8_t SET_MEMORY_ADDRESSING_MODE_VERICAL[4]=	{ 3, WRITE, COMMAND | NON_CONT, 0b00000001}; // Vertical memory addressing mode
const uint8_t SET_MEMORY_ADDRESSING_MODE_PAGE[4]=		{ 3, WRITE, COMMAND | NON_CONT, 0b00000010}; // Page memory addressing mode

#define SET_LOWER_COLLUMN_ADDRESS_PAM	0b00000000	// 0b0000XXXX
#define SET_HIGHER_COLLUMN_ADDRESS_PAM	0b00010000	// 0b0001XXXX

// Address modes:
#define HORIZONTAL_ADDERSSING_MODE		0b00000000	//
#define VERTICAL_ADDERSSING_MODE		0b00000001	//
#define PAGE_ADDERSSING_MODE			0b00000001	//


// COMMANDS LIST
//const uint8_t SET_CONTRAST_CONTROL	= 0x81;

// Set column start address for page addressing mode
void Driver::SetColumnStartAddressForPAM(const uint8_t columnStartAddress)
{
	m_i2c.StartCondition();

	bool ack = false;
	ack |= m_i2c.TxByte(m_slaveAddress | WRITE);
	ack |= m_i2c.TxByte(COMMAND | NON_CONT);
	ack |= m_i2c.TxByte(SET_LOWER_COLLUMN_ADDRESS_PAM | (columnStartAddress & 0b00001111));
	ack |= m_i2c.TxByte(COMMAND | NON_CONT);
	ack |= m_i2c.TxByte(SET_HIGHER_COLLUMN_ADDRESS_PAM | ((columnStartAddress >> 4) & 0b00001111));
	m_i2c.StopCondition();
	SetError(ack == true);
}




Driver::Driver(const SlaveAddress slaveAddress) : m_slaveAddress(0x00), m_error(false), m_i2c(2)
{
	switch(slaveAddress)
	{
		case SA_0X7A: m_slaveAddress = 0x7A; break;
		case SA_0X78: m_slaveAddress = 0x78; break;
		default:
			return;	// Wrong address
	}
	//I2cRxTx::Init();
	//I2cRxTx::StopCondition();
	m_i2c.StopCondition();
}

void Driver::SetError(const bool toSet)
{
	m_error = toSet;
}

bool Driver::GetError() const
{
	return m_error;
}

void Driver::SendCommand(const uint8_t* commandPointer)
{
	const uint8_t* cmdPtr = commandPointer;
	uint8_t commandLength = *cmdPtr;
	++cmdPtr;

	m_i2c.StartCondition();
	for(uint8_t cmdCnt = 0; cmdCnt < commandLength; ++cmdCnt)
	{
		const uint8_t byteToSend = (cmdCnt == 0) ? (*cmdPtr | m_slaveAddress) : (*cmdPtr);
		++cmdPtr;

		if (m_i2c.TxByte(byteToSend))
		{
			SetError(true);
			break;
		}
	}
	m_i2c.StopCondition();
}

void Driver::SendData(const uint8_t* dataPointer, const uint16_t dataLength)
{
	//I2cRxTx::StartCondition();
	m_i2c.StartCondition();

	//I2cRxTx::SendByte(m_slaveAddress | WRITE);
	//bool ack = I2cRxTx::GetAcknowlegeBit();
	bool ack = m_i2c.TxByte(m_slaveAddress | WRITE);

	//I2cRxTx::SendByte(DATA | CONT);
	//ack |= I2cRxTx::GetAcknowlegeBit();
	ack |= m_i2c.TxByte(DATA | CONT);


	//I2cRxTx::SendByte(0x00);
	//ack |= I2cRxTx::GetAcknowlegeBit();
	ack |= m_i2c.TxByte(0x00);

	if (ack)
	{
		//I2cRxTx::StopCondition();
		m_i2c.StopCondition();
		SetError(true);
		return;
	}

	const uint8_t* dataPtr = dataPointer;
	for(uint16_t dataCnt = 0; dataCnt < dataLength; ++dataCnt)
	{
//		I2cRxTx::SendByte(*dataPtr);
//		if (I2cRxTx::GetAcknowlegeBit())
//		{
//			SetError(true);
//			break;
//		}

		if (m_i2c.TxByte(*dataPtr))
		{
			SetError(true);
			break;
		}


		++dataPtr;

	}
	//I2cRxTx::StopCondition();
	m_i2c.StopCondition();
}

void Driver::Test()
{
	SendCommand(CHARGE_PUMP_ON);
	SendCommand(DISPLAY_ON);
	SendCommand(ENTIRE_DISPLAY_ON);
	SendCommand(SET_NORMAL_DISPLAY);

	const uint8_t tx4[128] =
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	};

	SendData(tx4, 128);

	if (GetError())
	{
		LcdScreen::LcdClear();
		LcdScreen::LcdToPos(0, 0);
		LcdScreen::LcdPrint("FAIL");
		return;
	}

	LcdScreen::LcdClear();
	LcdScreen::LcdToPos(0, 0);
	LcdScreen::LcdPrint("OK");
}

}	// namespace SSD1306
}	// namespace LcdDrivers



