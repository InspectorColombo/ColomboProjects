/*
 * IntToStr.cpp
 *
 *  Created on: Jan 22, 2025
 *      Author: Goggy
 */


#include "IntToStr.hpp"


namespace intToStr
{

// Define string conversion buffer
#define STR_SIZE 		22
static char strBuff[STR_SIZE];

template <const size_t BUFF_SIZE>
class Buffer
{
public:
	Buffer() : m_size(0)
	{
		Clear();
	}

	void Clear()
	{
		m_size = 0;
		for(uint8_t idx = 0; idx < BUFF_SIZE; ++idx)
		{
			m_buff[idx] = 0;
		}
	}

	void Error()
	{
		// Not implemented
	}


private:
	uint8_t m_buff[BUFF_SIZE];
	uint8_t m_size;
};



// ------------ To Hex conversions ---------------
template <class T>
inline const char* UIntToHex(const T valInput, const uint8_t sizeInHalfBytes)
{
	strBuff[0] = '0';
	strBuff[1] = 'x';
	T val = valInput;
	for(uint8_t halfByteCnt = 0; halfByteCnt < sizeInHalfBytes; ++halfByteCnt)
	{
		char halfHexSymbol = (uint8_t)(val & 0x0F);
		halfHexSymbol += (halfHexSymbol > 9) ? ('A' - 10) : ('0');
		strBuff[2 + (sizeInHalfBytes - 1 - halfByteCnt)] = halfHexSymbol;
		val >>= 4;
	}
	strBuff[2 + sizeInHalfBytes] = 0x00;
	return &strBuff[0];
}


template <>
const char* ToHex(const uint8_t val)
{
	return UIntToHex(val, sizeof(val) * 2);
}


template <>
const char* ToHex(const uint16_t val)
{
	return UIntToHex(val, sizeof(val) * 2);
}

template <>
const char* ToHex(const uint32_t val)
{
	return UIntToHex(val, sizeof(val) * 2);
}

template <>
const char* ToHex(const uint64_t val)
{
	return UIntToHex(val, sizeof(val) * 2);
}

//--------------- To decimal conversions --------------------

template <class T>
inline T Abs(const T val)
{
	return (val < T(0)) ? (T(0) - val) : val;
}

inline bool IsSigned(const uint8_t) {return false;}
inline bool IsSigned(const uint16_t) {return false;}
inline bool IsSigned(const uint32_t) {return false;}
inline bool IsSigned(const uint64_t) {return false;}
inline bool IsSigned(const int8_t) {return true;}
inline bool IsSigned(const int16_t) {return true;}
inline bool IsSigned(const int32_t) {return true;}
inline bool IsSigned(const int64_t) {return true;}


template <class T>
inline char* IntToDec(char* dstPtr, const T valInput, const uint8_t sizeInDigits)
{
	for(uint8_t digitIdx = 0; digitIdx < sizeInDigits; ++digitIdx)





	strBuff[0] = '0';
	strBuff[1] = 'x';
	T val = valInput;
	for(uint8_t halfByteCnt = 0; halfByteCnt < sizeInHalfBytes; ++halfByteCnt)
	{
		char halfHexSymbol = (uint8_t)(val & 0x0F);
		halfHexSymbol += (halfHexSymbol > 9) ? ('A' - 10) : ('0');
		strBuff[2 + (sizeInHalfBytes - 1 - halfByteCnt)] = halfHexSymbol;
		val >>= 4;
	}
	strBuff[2 + sizeInHalfBytes] = 0x00;
	return &strBuff[0];
}
*/


/*
template <>
const char* ToDec(const uint8_t val)
{

}
*/



}	// namespace intToStr


