/*
 * LCD_SSD1306.cpp
 *
 *  Created on: Jan 14, 2025
 *      Author: Goggy
 */

#include "LCD_SSD1306.hpp"


namespace LcdDrivers
{
namespace SSD1306
{
// Read/Write bits definition
#define WRITE 0x00
#define READ 0x01

// Command/Data bits definition
#define CONT		0b00000000		// continuation
#define NON_CONT	0b10000000		// non continuation
#define COMMAND		0b00000000		// COMMAND follow
#define DATA		0b01000000		// DATA follow

// COMMANDS
const uint8_t CHARGE_PUMP_ON[5]		= { 4, WRITE, COMMAND | CONT, 0x8D, 0b00010100	};
const uint8_t CHARGE_PUMP_OFF[5]	= { 4, WRITE, COMMAND | CONT, 0x8D, 0b00010000	};

const uint8_t DISPLAY_ON[4]			= { 3, WRITE, COMMAND | NON_CONT, 0xAF }; // (normal mode)
const uint8_t DISPLAY_OFF[4]		= { 3, WRITE, COMMAND | NON_CONT, 0xAE }; // (sleep mode)

const uint8_t ENTIRE_DISPLAY_ON[4]	= { 3, WRITE, COMMAND | NON_CONT, 0xA4 }; // Entire display ON
const uint8_t ENTIRE_DISPLAY_OFF[4]	= { 3, WRITE, COMMAND | NON_CONT, 0xA5 }; // Entire display OFF

const uint8_t SET_NORMAL_DISPLAY[4]	= { 3, WRITE, COMMAND | NON_CONT, 0xA6 }; // Set normal display
const uint8_t SET_INVERSE_DISPLAY[4]= { 3, WRITE, COMMAND | NON_CONT, 0xA7 }; // Set inverse display



// COMMANDS LIST
//const uint8_t SET_CONTRAST_CONTROL	= 0x81;


Driver::Driver(const SlaveAddress slaveAddress) : m_slaveAddress(0x00), m_error(false)
{
	switch(slaveAddress)
	{
		case SA_0X7A: m_slaveAddress = 0x7A; break;
		case SA_0X78: m_slaveAddress = 0x78; break;
		default:
			return;	// Wrong address
	}
	I2cRxTx::Init();
	I2cRxTx::StopCondition();
}

void Driver::SetError(const bool toSet)
{
	m_error = toSet;
}

bool Driver::GetError() const
{
	return m_error;
}

void Driver::SendCommand(const uint8_t* commandPointer)
{
	const uint8_t* cmdPtr = commandPointer;
	uint8_t commandLength = *cmdPtr;
	++cmdPtr;

	I2cRxTx::StartCondition();
	for(uint8_t cmdCnt = 0; cmdCnt < commandLength; ++cmdCnt)
	{
		const uint8_t byteToSend = (cmdCnt == 0) ? (*cmdPtr | m_slaveAddress) : (*cmdPtr);
		++cmdPtr;

		I2cRxTx::SendByte(byteToSend);
		const bool ack = I2cRxTx::GetAcknowlegeBit();
		if (ack)
		{
			SetError(true);
			break;
		}
	}
	I2cRxTx::StopCondition();
}

void Driver::SendData(const uint8_t* dataPointer, const uint16_t dataLength)
{
	I2cRxTx::StartCondition();

	I2cRxTx::SendByte(m_slaveAddress | WRITE);
	bool ack = I2cRxTx::GetAcknowlegeBit();
	I2cRxTx::SendByte(DATA | CONT);
	ack |= I2cRxTx::GetAcknowlegeBit();
	I2cRxTx::SendByte(0x00);
	ack |= I2cRxTx::GetAcknowlegeBit();

	if (ack)
	{
		I2cRxTx::StopCondition();
		SetError(true);
		return;
	}

	const uint8_t* dataPtr = dataPointer;
	for(uint16_t dataCnt = 0; dataCnt < dataLength; ++dataCnt)
	{
		I2cRxTx::SendByte(*dataPtr);
		++dataPtr;
		if (I2cRxTx::GetAcknowlegeBit())
		{
			SetError(true);
			break;
		}
	}
	I2cRxTx::StopCondition();
}

void Driver::Test()
{
	SendCommand(CHARGE_PUMP_ON);
	SendCommand(DISPLAY_ON);
	SendCommand(ENTIRE_DISPLAY_ON);
	SendCommand(SET_NORMAL_DISPLAY);

	const uint8_t tx4[128] =
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	};

	SendData(tx4, 128);


	if (GetError())
	{
		LcdScreen::LcdClear();
		LcdScreen::LcdToPos(0, 0);
		LcdScreen::LcdPrint("FAIL");
		return;
	}


	LcdScreen::LcdClear();
	LcdScreen::LcdToPos(0, 0);
	LcdScreen::LcdPrint("OK");

}




};




}	// namespace SSD1306
}	// namespace LcdDrivers



