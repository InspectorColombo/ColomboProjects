/*
 * I2cSw.cpp
 *
 *  Created on: Jan 14, 2025
 *      Author: Goggy
 */

#include "I2cSw.hpp"

#include "stm32f103xb.h"

#include "GpioConfigurator.hpp"

namespace i2c
{

// I2C SW PINS definition
#define I2C_PORT		GPIOB
#define I2C_SDA_PIN		7
#define I2C_SCL_PIN		6

//! Used to produce rough SW delay in microseconds
// Must be configured according to MCU CLK frequency
inline void RoughDelayUs(const uint8_t delayUs)
{
	for(uint8_t usCnt = delayUs; usCnt != 0; -usCnt)
	{
		asm("nop");
	}
}


inline bool GetSDA()
{
	return (I2C_PORT->IDR & (1 << I2C_SDA_PIN)) != 0;
}

inline void SetSDA()
{
	I2C_PORT->BSRR |= (1 << I2C_SDA_PIN);
}
inline void ClrSDA()
{
	I2C_PORT->BRR |= (1 << I2C_SDA_PIN);
}

inline void SetSCL()
{
	I2C_PORT->BSRR |= (1 << I2C_SCL_PIN);
}
inline void ClrSCL()
{
	I2C_PORT->BRR |= (1 << I2C_SCL_PIN);
}

inline void SDAOut()
{
	GpioConfigurator::SetGpioOutOpenDrain(I2C_PORT, I2C_SDA_PIN);
}
inline void SDAIn()
{
	GpioConfigurator::SetGpioInFloating(I2C_PORT, I2C_SDA_PIN);
}
inline void SCLOut()
{
	GpioConfigurator::SetGpioOutOpenDrain(I2C_PORT, I2C_SCL_PIN);
}
inline void SCLIn()
{
	GpioConfigurator::SetGpioInFloating(I2C_PORT, I2C_SCL_PIN);
}

I2cSw::I2cSw(const uint8_t usDelay)
{
	GpioConfigurator::GpioClockEnable(I2C_PORT);
	SetSDA();
	SetSCL();
	SDAOut();
	SCLOut();
	RoughDelayUs(m_usDelay);
}

void I2cSw::StartCondition()
{
	SetSCL();
	RoughDelayUs(m_usDelay);
	ClrSDA();
	RoughDelayUs(m_usDelay);
	ClrSCL();
	RoughDelayUs(m_usDelay);
}

void I2cSw::StopCondition()
{
	ClrSDA();
	RoughDelayUs(m_usDelay);
	SetSCL();
	RoughDelayUs(m_usDelay);
	SetSDA();
	RoughDelayUs(m_usDelay);
}

bool I2cSw::TxByte(const uint8_t toSend, const bool ack) const
{
	uint8_t byte = toSend;
	for(uint8_t bitCnt = 0; bitCnt < 8; ++bitCnt)
	{
		if ((byte & 0b10000000) != 0)
		{
			SetSDA();
		}
		else
		{
			ClrSDA();
		}
		RoughDelayUs(m_usDelay);
		SetSCL();
		RoughDelayUs(m_usDelay);
		ClrSCL();
		RoughDelayUs(m_usDelay);	// !!!! questionable. May be should be removed
		byte = byte << 1;
	}
	return GetAckBit(ack);

//	if (ack)
//	{
//		SetSDA();
//	}
//	else
//	{
//		ClrSDA();
//	}
//
//	RoughDelayUs(m_usDelay);
//	SetSCL();
//	RoughDelayUs(m_usDelay);
//	const bool ackResult = GetSDA();
//	ClrSCL();
//	RoughDelayUs(m_usDelay);
//	return ackResult;
}


uint8_t I2cSw::RxByte() const
{
	SetSDA();	// Set SDA pulled up to get proper answer
	RoughDelayUs(m_usDelay);

	uint8_t byte = 0;
	for(uint8_t bitCnt = 0; bitCnt < 8; ++bitCnt)
	{
		byte = byte << 1;
		SetSCL();
		RoughDelayUs(m_usDelay);
		if (GetSDA())
		{
			byte |= 0b00000001;
		}
		RoughDelayUs(m_usDelay);
		ClrSCL();
		RoughDelayUs(m_usDelay);	// !!!! questionable. May be should be removed
	}
	return byte;
}

bool I2cSw::GetAckBit(const bool ack) const
{
	if (ack)
	{
		SetSDA();
	}
	else
	{
		ClrSDA();
	}

	RoughDelayUs(m_usDelay);
	SetSCL();
	RoughDelayUs(m_usDelay);
	const bool result = GetSDA();
	ClrSCL();
	RoughDelayUs(m_usDelay);

	return result;
}


}	// namespace i2c


