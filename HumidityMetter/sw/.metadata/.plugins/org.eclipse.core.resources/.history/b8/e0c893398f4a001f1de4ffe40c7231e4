/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#include "stm32f103xb.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void InitClocks()
{
	// Use HSI = 8MHz
	// SYSCLK = HSI

	uint32_t temp = RCC->CR;
	temp &= ~(RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEBYP | RCC_CR_HSEON);
	temp |= RCC_CR_HSEON;
	RCC->CR = temp;

	temp = RCC->CFGR;

	temp &= ~(RCC_CFGR_MCO);
	temp |= RCC_CFGR_MCO_SYSCLK;

	temp &= ~(RCC_CFGR_SW);
	temp |= RCC_CFGR_SW_HSI;

	// AHB = SYSCLK / 8
	temp &= ~(RCC_CFGR_HPRE);
	temp |= RCC_CFGR_HPRE_DIV8;

	// PCLK2 = SYSCLK / 1
	temp &= ~(RCC_CFGR_PPRE2);
	temp |= RCC_CFGR_PPRE2_DIV1;

	// PCLK1 = SYSCLK / 1
	temp &= ~(RCC_CFGR_PPRE1);
	temp |= RCC_CFGR_PPRE1_DIV1;

	RCC->CFGR = temp;
}

void ALTERNATIVE_FUNCTION_CLOCK_ENABLE()
{
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
}

void PA_CLOCK_ENABLE()
{
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
}

void PB_CLOCK_ENABLE()
{
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
}


void PC_CLOCK_ENABLE()
{
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
}

void InitPorts()
{
	ALTERNATIVE_FUNCTION_CLOCK_ENABLE();
	PA_CLOCK_ENABLE();
	PB_CLOCK_ENABLE();
	PC_CLOCK_ENABLE();
}


#define LCD_PORT GPIOB
#define LCD_RS_PIN	 9	//PB9
#define LCD_RW_PIN	 8	//PB8
#define LCD_E_PIN	 7	//PB7
#define LCD_D4_PIN	 15	//PB15
#define LCD_D5_PIN	 14	//PB14
#define LCD_D6_PIN	 13	//PB13
#define LCD_D7_PIN	 12	//PB11

void SetGpioOutPushPull(GPIO_TypeDef* port, const uint8_t bitIdx)
{
	const uint8_t bitShift = (bitIdx > 7) ? ((bitIdx - 8) * 4) : (bitIdx * 4);
	uint32_t mask = 0b1111 << bitShift;
	uint32_t outBitsPushPull = 0b0001 << bitShift;

	if (bitIdx > 7)
	{
		port->CRH &= ~mask;
		port->CRH |= outBitsPushPull;
	}
	else
	{
		port->CRL &= ~mask;
		port->CRL |= outBitsPushPull;
	}
}

void SetGpioInFloating(GPIO_TypeDef* port, const uint8_t bitIdx)
{
	const uint8_t bitShift = (bitIdx > 7) ? ((bitIdx - 8) * 4) : (bitIdx * 4);
	uint32_t mask = 0b1111 << bitShift;
	uint32_t inFloating = 0b0100 << bitShift;

	if (bitIdx > 7)
	{
		port->CRH &= ~mask;
		port->CRH |= inFloating;
	}
	else
	{
		port->CRL &= ~mask;
		port->CRL |= inFloating;
	}
}

void LcdRS(const uint8_t value)
{
	 LCD_PORT->ODR = (value != 0)
		? (LCD_PORT->ODR | (1 << LCD_RS_PIN))
		: (LCD_PORT->ODR & ~(1 << LCD_RS_PIN));
}

void LcdRW(const uint8_t value)
{
	 LCD_PORT->ODR = (value != 0)
		? (LCD_PORT->ODR | (1 << LCD_RW_PIN))
		: (LCD_PORT->ODR & ~(1 << LCD_RW_PIN));
}

void LcdE(const uint8_t value)
{
	 LCD_PORT->ODR = (value != 0)
		? (LCD_PORT->ODR | (1 << LCD_E_PIN))
		: (LCD_PORT->ODR & ~(1 << LCD_E_PIN));
}

void LcdOut4bits(const uint8_t data)
{
	uint32_t temp = LCD_PORT->ODR;
	temp &= ~((1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN));
	temp |= ((data & 0b0001) != 0) ? (1 << LCD_D4_PIN) : 0;
	temp |= ((data & 0b0010) != 0) ? (1 << LCD_D5_PIN) : 0;
	temp |= ((data & 0b0100) != 0) ? (1 << LCD_D6_PIN) : 0;
	temp |= ((data & 0b1000) != 0) ? (1 << LCD_D7_PIN) : 0;
	LCD_PORT->ODR = temp;
}

uint8_t LcdIn4bits()
{
	uint32_t temp = LCD_PORT->IDR;

	uint8_t result = 0;
	result |= ((temp & (1 << LCD_D4_PIN)) != 0) ? 0b0001 : 0b0000;
	result |= ((temp & (1 << LCD_D5_PIN)) != 0) ? 0b0010 : 0b0000;
	result |= ((temp & (1 << LCD_D6_PIN)) != 0) ? 0b0100 : 0b0000;
	result |= ((temp & (1 << LCD_D7_PIN)) != 0) ? 0b1000 : 0b0000;
	return result;
}

void LcdDelayUs(const uint32_t usec)
{
	const uint32_t maxCount = (usec > 16) ? (usec * 65 / 1000) : 1;
//	if (maxCount == 0)
//	{
//		maxCount = 1;
//	}
	for(uint32_t i = 0; i < maxCount; ++i)
	{
		volatile uint32_t bbbb=12;
		if (bbbb==12)
		{
			++bbbb;
		}
	}
}


void LcdSetDataOut()
{
	SetGpioOutPushPull(LCD_PORT, LCD_D4_PIN);
	SetGpioOutPushPull(LCD_PORT, LCD_D5_PIN);
	SetGpioOutPushPull(LCD_PORT, LCD_D6_PIN);
	SetGpioOutPushPull(LCD_PORT, LCD_D7_PIN);
}

void LcdSetDataIn()
{
	SetGpioInFloating(LCD_PORT, LCD_D4_PIN);
	SetGpioInFloating(LCD_PORT, LCD_D5_PIN);
	SetGpioInFloating(LCD_PORT, LCD_D6_PIN);
	SetGpioInFloating(LCD_PORT, LCD_D7_PIN);
}

void Lcd4BitCommand(const uint8_t rs, const uint8_t rw, const uint8_t data)
{
	LcdRS(rs);
	LcdRW(rw);
	LcdOut4bits((data & 0b11110000) >> 4);
	LcdDelayUs(50);
	LcdE(1);
	LcdDelayUs(50);
	LcdE(0);
	LcdDelayUs(50);
	LcdOut4bits((data & 0b00001111) >> 0);
	LcdDelayUs(50);
	LcdE(1);
	LcdDelayUs(50);
	LcdE(0);
	LcdDelayUs(50);
}

void LcdInit()
{
	PB_CLOCK_ENABLE();
	LcdRS(0);
	LcdRW(0);
	LcdE(0);
	LcdOut4bits(0b0000);

	// Delay 40ms after power on
	LcdDelayUs(40000);

	LcdSetDataOut();
	SetGpioOutPushPull(LCD_PORT, LCD_RS_PIN);
	SetGpioOutPushPull(LCD_PORT, LCD_RW_PIN);
	SetGpioOutPushPull(LCD_PORT, LCD_E_PIN);

	// Switch to 4 bit mode
	LcdDelayUs(50);
	LcdRS(0);
	LcdRW(0);
	LcdOut4bits(0b0011);
	LcdDelayUs(50);
	LcdE(1);
	LcdDelayUs(50);
	LcdE(0);
	LcdDelayUs(50);

	LcdDelayUs(39);
	Lcd4BitCommand(0,0, 0b00101000);	// 2 lines, 5x8 dots

	LcdDelayUs(39);
	Lcd4BitCommand(0,0, 0b00101000);	// 2 lines, 5x8 dots

	LcdDelayUs(39);
	Lcd4BitCommand(0,0, 0b00001100);	// D = 1, C = 0, B = 0

	LcdDelayUs(39);
	Lcd4BitCommand(0,0, 0b00000001);	// Display clear

	LcdDelayUs(1530);
	Lcd4BitCommand(0,0, 0b00000110);	// Entry mode set. Cursor - increment. Display shift - OFF
	LcdDelayUs(39);
}


void LcdClear()
{
	Lcd4BitCommand(0,0, 0b00000001);	// Display clear
	LcdDelayUs(39);
}

void LcdToPos(const uint8_t x, const uint8_t y)
{
	const uint8_t DRAM_ADDR = x + y * 40;
	Lcd4BitCommand(0,0, 0b10000000 | DRAM_ADDR);	// Set DRAM ADDR command
	LcdDelayUs(39);
}


void LcdPrintChar(const uint8_t ch)
{
	Lcd4BitCommand(1,0, ch);	// Display clear
	LcdDelayUs(43);
}

// Print null terminated string
void LcdPrint(char* string)
{
	char* chPtr = string;
	while(*chPtr != 0x00)
	{
		LcdPrintChar((uint8_t)(*chPtr));
		++chPtr;
	}
}

void LcdPrintNumber(const uint16_t valueToPrint)
{
	uint16_t value = valueToPrint;
	uint8_t printStr[5] = {' ', ' ', ' ', ' ', '0'};
	value = valueToPrint;
	for(uint8_t charIdx = 0; charIdx < 5; ++charIdx)
	{
		if (value == 0)
			break;

		uint8_t digit = (uint8_t)(value % 10) + (uint8_t)('0');
		printStr[4 - charIdx] = digit;
		value /= 10;
	}
	for(uint8_t charIdx = 0; charIdx < 5; ++charIdx)
	{
		LcdPrintChar(printStr[charIdx]);
	}
}


class MyClass
{
public:
	MyClass()
	{
	};
private:
};



int main(void)
{
	InitClocks();
	InitPorts();
	LcdDelayUs(1500000);	// Wait for power on of LCD

	LcdInit();


  uint32_t temp = GPIOC->CRH;
  temp &= ~(((uint32_t)0b1111) << 20);
  //temp |= (((uint32_t)0b0011) << 20);
  temp |= (((uint32_t)0b0111) << 20);
  GPIOC->CRH  = temp;
//  GPIOC->CRL |= (1 << 13);

//  GPIOC->CRL


  {		// Test clock output on pin  MCO(PA8)
	  //RCC->APB2ENR |= (1 << 0) | (1 << 2);	// PA and AFIO clock enable:

	  uint32_t temp = GPIOA->CRH;
	  temp &= ~(((uint32_t)0b1111) << 0);
	  temp |= (((uint32_t)0b1011) << 0);
	  GPIOA->CRH  = temp;

//	  temp = RCC->CFGR;
//	  temp &= ~(((uint32_t)0b111) << 24);
//	  temp |= ((uint32_t)0b100) << 24;
//	  RCC->CFGR = temp;
  }

  LcdPrint("Hello!!!");

  //LcdClear();
  //LcdToPos(4,1);
  //LcdPrint("123");

  uint16_t cnt = 0;
  while (1)
  {
	  //GPIOC->

	  LcdToPos(0,1);
	  LcdPrintNumber(cnt);
	  ++cnt;

	  GPIOC->ODR &= ~(((uint32_t)(1)) << 13);


	  //

	  //LcdDelayUs(30000);


	  GPIOC->ODR |= (((uint32_t)1) << 13);


	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);


	  //LcdDelayUs(30000);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}









